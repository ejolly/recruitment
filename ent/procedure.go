// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/ent/procedure"
	"github.com/facebook/ent/dialect/sql"
)

// Procedure is the model entity for the Procedure schema.
type Procedure struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ParticipantCount holds the value of the "participantCount" field.
	ParticipantCount string `json:"participantCount,omitempty"`
	// Adult holds the value of the "adult" field.
	Adult bool `json:"adult,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Procedure) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
		&sql.NullString{}, // name
		&sql.NullString{}, // participantCount
		&sql.NullBool{},   // adult
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Procedure fields.
func (pr *Procedure) assignValues(values ...interface{}) error {
	if m, n := len(values), len(procedure.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		pr.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[0])
	} else if value.Valid {
		pr.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[1])
	} else if value.Valid {
		pr.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		pr.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field participantCount", values[3])
	} else if value.Valid {
		pr.ParticipantCount = value.String
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field adult", values[4])
	} else if value.Valid {
		pr.Adult = value.Bool
	}
	return nil
}

// Update returns a builder for updating this Procedure.
// Note that, you need to call Procedure.Unwrap() before calling this method, if this Procedure
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Procedure) Update() *ProcedureUpdateOne {
	return (&ProcedureClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Procedure) Unwrap() *Procedure {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Procedure is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Procedure) String() string {
	var builder strings.Builder
	builder.WriteString("Procedure(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", participantCount=")
	builder.WriteString(pr.ParticipantCount)
	builder.WriteString(", adult=")
	builder.WriteString(fmt.Sprintf("%v", pr.Adult))
	builder.WriteByte(')')
	return builder.String()
}

// Procedures is a parsable slice of Procedure.
type Procedures []*Procedure

func (pr Procedures) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
