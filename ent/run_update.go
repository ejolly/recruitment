// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/ent/predicate"
	"github.com/empiricaly/recruitment/ent/run"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RunUpdate is the builder for updating Run entities.
type RunUpdate struct {
	config
	hooks      []Hook
	mutation   *RunMutation
	predicates []predicate.Run
}

// Where adds a new predicate for the builder.
func (ru *RunUpdate) Where(ps ...predicate.Run) *RunUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetUpdatedAt sets the updatedAt field.
func (ru *RunUpdate) SetUpdatedAt(t time.Time) *RunUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStartAt sets the startAt field.
func (ru *RunUpdate) SetStartAt(t time.Time) *RunUpdate {
	ru.mutation.SetStartAt(t)
	return ru
}

// SetStartedAt sets the startedAt field.
func (ru *RunUpdate) SetStartedAt(t time.Time) *RunUpdate {
	ru.mutation.SetStartedAt(t)
	return ru
}

// SetEndedAt sets the endedAt field.
func (ru *RunUpdate) SetEndedAt(t time.Time) *RunUpdate {
	ru.mutation.SetEndedAt(t)
	return ru
}

// SetError sets the error field.
func (ru *RunUpdate) SetError(s string) *RunUpdate {
	ru.mutation.SetError(s)
	return ru
}

// Mutation returns the RunMutation object of the builder.
func (ru *RunUpdate) Mutation() *RunMutation {
	return ru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RunUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := run.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   run.Table,
			Columns: run.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: run.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartAt,
		})
	}
	if value, ok := ru.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartedAt,
		})
	}
	if value, ok := ru.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldEndedAt,
		})
	}
	if value, ok := ru.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldError,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RunUpdateOne is the builder for updating a single Run entity.
type RunUpdateOne struct {
	config
	hooks    []Hook
	mutation *RunMutation
}

// SetUpdatedAt sets the updatedAt field.
func (ruo *RunUpdateOne) SetUpdatedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStartAt sets the startAt field.
func (ruo *RunUpdateOne) SetStartAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetStartAt(t)
	return ruo
}

// SetStartedAt sets the startedAt field.
func (ruo *RunUpdateOne) SetStartedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetStartedAt(t)
	return ruo
}

// SetEndedAt sets the endedAt field.
func (ruo *RunUpdateOne) SetEndedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetEndedAt(t)
	return ruo
}

// SetError sets the error field.
func (ruo *RunUpdateOne) SetError(s string) *RunUpdateOne {
	ruo.mutation.SetError(s)
	return ruo
}

// Mutation returns the RunMutation object of the builder.
func (ruo *RunUpdateOne) Mutation() *RunMutation {
	return ruo.mutation
}

// Save executes the query and returns the updated entity.
func (ruo *RunUpdateOne) Save(ctx context.Context) (*Run, error) {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := run.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *Run
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunUpdateOne) SaveX(ctx context.Context) *Run {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RunUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RunUpdateOne) sqlSave(ctx context.Context) (r *Run, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   run.Table,
			Columns: run.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: run.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Run.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartAt,
		})
	}
	if value, ok := ruo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartedAt,
		})
	}
	if value, ok := ruo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldEndedAt,
		})
	}
	if value, ok := ruo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldError,
		})
	}
	r = &Run{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
