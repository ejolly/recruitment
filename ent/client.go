// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/empiricaly/recruitment/ent/migrate"

	"github.com/empiricaly/recruitment/ent/procedure"
	"github.com/empiricaly/recruitment/ent/project"
	"github.com/empiricaly/recruitment/ent/run"
	"github.com/empiricaly/recruitment/ent/steprun"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Procedure is the client for interacting with the Procedure builders.
	Procedure *ProcedureClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Run is the client for interacting with the Run builders.
	Run *RunClient
	// StepRun is the client for interacting with the StepRun builders.
	StepRun *StepRunClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Procedure = NewProcedureClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Run = NewRunClient(c.config)
	c.StepRun = NewStepRunClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Procedure: NewProcedureClient(cfg),
		Project:   NewProjectClient(cfg),
		Run:       NewRunClient(cfg),
		StepRun:   NewStepRunClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:    cfg,
		Procedure: NewProcedureClient(cfg),
		Project:   NewProjectClient(cfg),
		Run:       NewRunClient(cfg),
		StepRun:   NewStepRunClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Procedure.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Procedure.Use(hooks...)
	c.Project.Use(hooks...)
	c.Run.Use(hooks...)
	c.StepRun.Use(hooks...)
}

// ProcedureClient is a client for the Procedure schema.
type ProcedureClient struct {
	config
}

// NewProcedureClient returns a client for the Procedure from the given config.
func NewProcedureClient(c config) *ProcedureClient {
	return &ProcedureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `procedure.Hooks(f(g(h())))`.
func (c *ProcedureClient) Use(hooks ...Hook) {
	c.hooks.Procedure = append(c.hooks.Procedure, hooks...)
}

// Create returns a create builder for Procedure.
func (c *ProcedureClient) Create() *ProcedureCreate {
	mutation := newProcedureMutation(c.config, OpCreate)
	return &ProcedureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Procedure entities.
func (c *ProcedureClient) CreateBulk(builders ...*ProcedureCreate) *ProcedureCreateBulk {
	return &ProcedureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Procedure.
func (c *ProcedureClient) Update() *ProcedureUpdate {
	mutation := newProcedureMutation(c.config, OpUpdate)
	return &ProcedureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcedureClient) UpdateOne(pr *Procedure) *ProcedureUpdateOne {
	mutation := newProcedureMutation(c.config, OpUpdateOne, withProcedure(pr))
	return &ProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcedureClient) UpdateOneID(id string) *ProcedureUpdateOne {
	mutation := newProcedureMutation(c.config, OpUpdateOne, withProcedureID(id))
	return &ProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Procedure.
func (c *ProcedureClient) Delete() *ProcedureDelete {
	mutation := newProcedureMutation(c.config, OpDelete)
	return &ProcedureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProcedureClient) DeleteOne(pr *Procedure) *ProcedureDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProcedureClient) DeleteOneID(id string) *ProcedureDeleteOne {
	builder := c.Delete().Where(procedure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcedureDeleteOne{builder}
}

// Query returns a query builder for Procedure.
func (c *ProcedureClient) Query() *ProcedureQuery {
	return &ProcedureQuery{config: c.config}
}

// Get returns a Procedure entity by its id.
func (c *ProcedureClient) Get(ctx context.Context, id string) (*Procedure, error) {
	return c.Query().Where(procedure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcedureClient) GetX(ctx context.Context, id string) *Procedure {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// Hooks returns the client hooks.
func (c *ProcedureClient) Hooks() []Hook {
	return c.hooks.Procedure
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id string) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id string) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{config: c.config}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id string) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id string) *Project {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// RunClient is a client for the Run schema.
type RunClient struct {
	config
}

// NewRunClient returns a client for the Run from the given config.
func NewRunClient(c config) *RunClient {
	return &RunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `run.Hooks(f(g(h())))`.
func (c *RunClient) Use(hooks ...Hook) {
	c.hooks.Run = append(c.hooks.Run, hooks...)
}

// Create returns a create builder for Run.
func (c *RunClient) Create() *RunCreate {
	mutation := newRunMutation(c.config, OpCreate)
	return &RunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Run entities.
func (c *RunClient) CreateBulk(builders ...*RunCreate) *RunCreateBulk {
	return &RunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Run.
func (c *RunClient) Update() *RunUpdate {
	mutation := newRunMutation(c.config, OpUpdate)
	return &RunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RunClient) UpdateOne(r *Run) *RunUpdateOne {
	mutation := newRunMutation(c.config, OpUpdateOne, withRun(r))
	return &RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RunClient) UpdateOneID(id string) *RunUpdateOne {
	mutation := newRunMutation(c.config, OpUpdateOne, withRunID(id))
	return &RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Run.
func (c *RunClient) Delete() *RunDelete {
	mutation := newRunMutation(c.config, OpDelete)
	return &RunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RunClient) DeleteOne(r *Run) *RunDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RunClient) DeleteOneID(id string) *RunDeleteOne {
	builder := c.Delete().Where(run.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RunDeleteOne{builder}
}

// Query returns a query builder for Run.
func (c *RunClient) Query() *RunQuery {
	return &RunQuery{config: c.config}
}

// Get returns a Run entity by its id.
func (c *RunClient) Get(ctx context.Context, id string) (*Run, error) {
	return c.Query().Where(run.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RunClient) GetX(ctx context.Context, id string) *Run {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// Hooks returns the client hooks.
func (c *RunClient) Hooks() []Hook {
	return c.hooks.Run
}

// StepRunClient is a client for the StepRun schema.
type StepRunClient struct {
	config
}

// NewStepRunClient returns a client for the StepRun from the given config.
func NewStepRunClient(c config) *StepRunClient {
	return &StepRunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `steprun.Hooks(f(g(h())))`.
func (c *StepRunClient) Use(hooks ...Hook) {
	c.hooks.StepRun = append(c.hooks.StepRun, hooks...)
}

// Create returns a create builder for StepRun.
func (c *StepRunClient) Create() *StepRunCreate {
	mutation := newStepRunMutation(c.config, OpCreate)
	return &StepRunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of StepRun entities.
func (c *StepRunClient) CreateBulk(builders ...*StepRunCreate) *StepRunCreateBulk {
	return &StepRunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StepRun.
func (c *StepRunClient) Update() *StepRunUpdate {
	mutation := newStepRunMutation(c.config, OpUpdate)
	return &StepRunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StepRunClient) UpdateOne(sr *StepRun) *StepRunUpdateOne {
	mutation := newStepRunMutation(c.config, OpUpdateOne, withStepRun(sr))
	return &StepRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StepRunClient) UpdateOneID(id int) *StepRunUpdateOne {
	mutation := newStepRunMutation(c.config, OpUpdateOne, withStepRunID(id))
	return &StepRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StepRun.
func (c *StepRunClient) Delete() *StepRunDelete {
	mutation := newStepRunMutation(c.config, OpDelete)
	return &StepRunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StepRunClient) DeleteOne(sr *StepRun) *StepRunDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StepRunClient) DeleteOneID(id int) *StepRunDeleteOne {
	builder := c.Delete().Where(steprun.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StepRunDeleteOne{builder}
}

// Query returns a query builder for StepRun.
func (c *StepRunClient) Query() *StepRunQuery {
	return &StepRunQuery{config: c.config}
}

// Get returns a StepRun entity by its id.
func (c *StepRunClient) Get(ctx context.Context, id int) (*StepRun, error) {
	return c.Query().Where(steprun.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StepRunClient) GetX(ctx context.Context, id int) *StepRun {
	sr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return sr
}

// Hooks returns the client hooks.
func (c *StepRunClient) Hooks() []Hook {
	return c.hooks.StepRun
}
