// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/empiricaly/recruitment/ent/procedure"
	"github.com/empiricaly/recruitment/ent/project"
	"github.com/empiricaly/recruitment/ent/run"
	"github.com/empiricaly/recruitment/ent/steprun"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProcedure = "Procedure"
	TypeProject   = "Project"
	TypeRun       = "Run"
	TypeStepRun   = "StepRun"
)

// ProcedureMutation represents an operation that mutate the Procedures
// nodes in the graph.
type ProcedureMutation struct {
	config
	op               Op
	typ              string
	id               *string
	createdAt        *time.Time
	updatedAt        *time.Time
	name             *string
	participantCount *string
	adult            *bool
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Procedure, error)
}

var _ ent.Mutation = (*ProcedureMutation)(nil)

// procedureOption allows to manage the mutation configuration using functional options.
type procedureOption func(*ProcedureMutation)

// newProcedureMutation creates new mutation for $n.Name.
func newProcedureMutation(c config, op Op, opts ...procedureOption) *ProcedureMutation {
	m := &ProcedureMutation{
		config:        c,
		op:            op,
		typ:           TypeProcedure,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcedureID sets the id field of the mutation.
func withProcedureID(id string) procedureOption {
	return func(m *ProcedureMutation) {
		var (
			err   error
			once  sync.Once
			value *Procedure
		)
		m.oldValue = func(ctx context.Context) (*Procedure, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Procedure.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcedure sets the old Procedure of the mutation.
func withProcedure(node *Procedure) procedureOption {
	return func(m *ProcedureMutation) {
		m.oldValue = func(context.Context) (*Procedure, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcedureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcedureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Procedure creation.
func (m *ProcedureMutation) SetID(id string) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProcedureMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the createdAt field.
func (m *ProcedureMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *ProcedureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Procedure.
// If the Procedure object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProcedureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *ProcedureMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *ProcedureMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *ProcedureMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Procedure.
// If the Procedure object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProcedureMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *ProcedureMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetName sets the name field.
func (m *ProcedureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ProcedureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Procedure.
// If the Procedure object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProcedureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ProcedureMutation) ResetName() {
	m.name = nil
}

// SetParticipantCount sets the participantCount field.
func (m *ProcedureMutation) SetParticipantCount(s string) {
	m.participantCount = &s
}

// ParticipantCount returns the participantCount value in the mutation.
func (m *ProcedureMutation) ParticipantCount() (r string, exists bool) {
	v := m.participantCount
	if v == nil {
		return
	}
	return *v, true
}

// OldParticipantCount returns the old participantCount value of the Procedure.
// If the Procedure object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProcedureMutation) OldParticipantCount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldParticipantCount is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldParticipantCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParticipantCount: %w", err)
	}
	return oldValue.ParticipantCount, nil
}

// ResetParticipantCount reset all changes of the "participantCount" field.
func (m *ProcedureMutation) ResetParticipantCount() {
	m.participantCount = nil
}

// SetAdult sets the adult field.
func (m *ProcedureMutation) SetAdult(b bool) {
	m.adult = &b
}

// Adult returns the adult value in the mutation.
func (m *ProcedureMutation) Adult() (r bool, exists bool) {
	v := m.adult
	if v == nil {
		return
	}
	return *v, true
}

// OldAdult returns the old adult value of the Procedure.
// If the Procedure object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProcedureMutation) OldAdult(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdult is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdult: %w", err)
	}
	return oldValue.Adult, nil
}

// ResetAdult reset all changes of the "adult" field.
func (m *ProcedureMutation) ResetAdult() {
	m.adult = nil
}

// Op returns the operation name.
func (m *ProcedureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Procedure).
func (m *ProcedureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProcedureMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.createdAt != nil {
		fields = append(fields, procedure.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, procedure.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, procedure.FieldName)
	}
	if m.participantCount != nil {
		fields = append(fields, procedure.FieldParticipantCount)
	}
	if m.adult != nil {
		fields = append(fields, procedure.FieldAdult)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProcedureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case procedure.FieldCreatedAt:
		return m.CreatedAt()
	case procedure.FieldUpdatedAt:
		return m.UpdatedAt()
	case procedure.FieldName:
		return m.Name()
	case procedure.FieldParticipantCount:
		return m.ParticipantCount()
	case procedure.FieldAdult:
		return m.Adult()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProcedureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case procedure.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case procedure.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case procedure.FieldName:
		return m.OldName(ctx)
	case procedure.FieldParticipantCount:
		return m.OldParticipantCount(ctx)
	case procedure.FieldAdult:
		return m.OldAdult(ctx)
	}
	return nil, fmt.Errorf("unknown Procedure field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProcedureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case procedure.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case procedure.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case procedure.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case procedure.FieldParticipantCount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParticipantCount(v)
		return nil
	case procedure.FieldAdult:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdult(v)
		return nil
	}
	return fmt.Errorf("unknown Procedure field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProcedureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProcedureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProcedureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Procedure numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProcedureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProcedureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcedureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Procedure nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProcedureMutation) ResetField(name string) error {
	switch name {
	case procedure.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case procedure.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case procedure.FieldName:
		m.ResetName()
		return nil
	case procedure.FieldParticipantCount:
		m.ResetParticipantCount()
		return nil
	case procedure.FieldAdult:
		m.ResetAdult()
		return nil
	}
	return fmt.Errorf("unknown Procedure field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProcedureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProcedureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProcedureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProcedureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProcedureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProcedureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProcedureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Procedure unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProcedureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Procedure edge %s", name)
}

// ProjectMutation represents an operation that mutate the Projects
// nodes in the graph.
type ProjectMutation struct {
	config
	op            Op
	typ           string
	id            *string
	createdAt     *time.Time
	updatedAt     *time.Time
	startAt       *time.Time
	startedAt     *time.Time
	endedAt       *time.Time
	error         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Project, error)
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows to manage the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for $n.Name.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the id field of the mutation.
func withProjectID(id string) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Project creation.
func (m *ProjectMutation) SetID(id string) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProjectMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the createdAt field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Project.
// If the Project object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Project.
// If the Project object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetStartAt sets the startAt field.
func (m *ProjectMutation) SetStartAt(t time.Time) {
	m.startAt = &t
}

// StartAt returns the startAt value in the mutation.
func (m *ProjectMutation) StartAt() (r time.Time, exists bool) {
	v := m.startAt
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old startAt value of the Project.
// If the Project object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProjectMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt reset all changes of the "startAt" field.
func (m *ProjectMutation) ResetStartAt() {
	m.startAt = nil
}

// SetStartedAt sets the startedAt field.
func (m *ProjectMutation) SetStartedAt(t time.Time) {
	m.startedAt = &t
}

// StartedAt returns the startedAt value in the mutation.
func (m *ProjectMutation) StartedAt() (r time.Time, exists bool) {
	v := m.startedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old startedAt value of the Project.
// If the Project object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProjectMutation) OldStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ResetStartedAt reset all changes of the "startedAt" field.
func (m *ProjectMutation) ResetStartedAt() {
	m.startedAt = nil
}

// SetEndedAt sets the endedAt field.
func (m *ProjectMutation) SetEndedAt(t time.Time) {
	m.endedAt = &t
}

// EndedAt returns the endedAt value in the mutation.
func (m *ProjectMutation) EndedAt() (r time.Time, exists bool) {
	v := m.endedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old endedAt value of the Project.
// If the Project object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProjectMutation) OldEndedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEndedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// ResetEndedAt reset all changes of the "endedAt" field.
func (m *ProjectMutation) ResetEndedAt() {
	m.endedAt = nil
}

// SetError sets the error field.
func (m *ProjectMutation) SetError(s string) {
	m.error = &s
}

// Error returns the error value in the mutation.
func (m *ProjectMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old error value of the Project.
// If the Project object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProjectMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldError is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ResetError reset all changes of the "error" field.
func (m *ProjectMutation) ResetError() {
	m.error = nil
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.createdAt != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	if m.startAt != nil {
		fields = append(fields, project.FieldStartAt)
	}
	if m.startedAt != nil {
		fields = append(fields, project.FieldStartedAt)
	}
	if m.endedAt != nil {
		fields = append(fields, project.FieldEndedAt)
	}
	if m.error != nil {
		fields = append(fields, project.FieldError)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	case project.FieldStartAt:
		return m.StartAt()
	case project.FieldStartedAt:
		return m.StartedAt()
	case project.FieldEndedAt:
		return m.EndedAt()
	case project.FieldError:
		return m.Error()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case project.FieldStartAt:
		return m.OldStartAt(ctx)
	case project.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case project.FieldEndedAt:
		return m.OldEndedAt(ctx)
	case project.FieldError:
		return m.OldError(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case project.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case project.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case project.FieldEndedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	case project.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case project.FieldStartAt:
		m.ResetStartAt()
		return nil
	case project.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case project.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	case project.FieldError:
		m.ResetError()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Project edge %s", name)
}

// RunMutation represents an operation that mutate the Runs
// nodes in the graph.
type RunMutation struct {
	config
	op            Op
	typ           string
	id            *string
	createdAt     *time.Time
	updatedAt     *time.Time
	startAt       *time.Time
	startedAt     *time.Time
	endedAt       *time.Time
	error         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Run, error)
}

var _ ent.Mutation = (*RunMutation)(nil)

// runOption allows to manage the mutation configuration using functional options.
type runOption func(*RunMutation)

// newRunMutation creates new mutation for $n.Name.
func newRunMutation(c config, op Op, opts ...runOption) *RunMutation {
	m := &RunMutation{
		config:        c,
		op:            op,
		typ:           TypeRun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRunID sets the id field of the mutation.
func withRunID(id string) runOption {
	return func(m *RunMutation) {
		var (
			err   error
			once  sync.Once
			value *Run
		)
		m.oldValue = func(ctx context.Context) (*Run, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Run.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRun sets the old Run of the mutation.
func withRun(node *Run) runOption {
	return func(m *RunMutation) {
		m.oldValue = func(context.Context) (*Run, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Run creation.
func (m *RunMutation) SetID(id string) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RunMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the createdAt field.
func (m *RunMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *RunMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Run.
// If the Run object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RunMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *RunMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *RunMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *RunMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Run.
// If the Run object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RunMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *RunMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetStartAt sets the startAt field.
func (m *RunMutation) SetStartAt(t time.Time) {
	m.startAt = &t
}

// StartAt returns the startAt value in the mutation.
func (m *RunMutation) StartAt() (r time.Time, exists bool) {
	v := m.startAt
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old startAt value of the Run.
// If the Run object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RunMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt reset all changes of the "startAt" field.
func (m *RunMutation) ResetStartAt() {
	m.startAt = nil
}

// SetStartedAt sets the startedAt field.
func (m *RunMutation) SetStartedAt(t time.Time) {
	m.startedAt = &t
}

// StartedAt returns the startedAt value in the mutation.
func (m *RunMutation) StartedAt() (r time.Time, exists bool) {
	v := m.startedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old startedAt value of the Run.
// If the Run object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RunMutation) OldStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ResetStartedAt reset all changes of the "startedAt" field.
func (m *RunMutation) ResetStartedAt() {
	m.startedAt = nil
}

// SetEndedAt sets the endedAt field.
func (m *RunMutation) SetEndedAt(t time.Time) {
	m.endedAt = &t
}

// EndedAt returns the endedAt value in the mutation.
func (m *RunMutation) EndedAt() (r time.Time, exists bool) {
	v := m.endedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old endedAt value of the Run.
// If the Run object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RunMutation) OldEndedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEndedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// ResetEndedAt reset all changes of the "endedAt" field.
func (m *RunMutation) ResetEndedAt() {
	m.endedAt = nil
}

// SetError sets the error field.
func (m *RunMutation) SetError(s string) {
	m.error = &s
}

// Error returns the error value in the mutation.
func (m *RunMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old error value of the Run.
// If the Run object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RunMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldError is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ResetError reset all changes of the "error" field.
func (m *RunMutation) ResetError() {
	m.error = nil
}

// Op returns the operation name.
func (m *RunMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Run).
func (m *RunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RunMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.createdAt != nil {
		fields = append(fields, run.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, run.FieldUpdatedAt)
	}
	if m.startAt != nil {
		fields = append(fields, run.FieldStartAt)
	}
	if m.startedAt != nil {
		fields = append(fields, run.FieldStartedAt)
	}
	if m.endedAt != nil {
		fields = append(fields, run.FieldEndedAt)
	}
	if m.error != nil {
		fields = append(fields, run.FieldError)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case run.FieldCreatedAt:
		return m.CreatedAt()
	case run.FieldUpdatedAt:
		return m.UpdatedAt()
	case run.FieldStartAt:
		return m.StartAt()
	case run.FieldStartedAt:
		return m.StartedAt()
	case run.FieldEndedAt:
		return m.EndedAt()
	case run.FieldError:
		return m.Error()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case run.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case run.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case run.FieldStartAt:
		return m.OldStartAt(ctx)
	case run.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case run.FieldEndedAt:
		return m.OldEndedAt(ctx)
	case run.FieldError:
		return m.OldError(ctx)
	}
	return nil, fmt.Errorf("unknown Run field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case run.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case run.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case run.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case run.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case run.FieldEndedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	case run.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	}
	return fmt.Errorf("unknown Run field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RunMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RunMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RunMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Run numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RunMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RunMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Run nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RunMutation) ResetField(name string) error {
	switch name {
	case run.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case run.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case run.FieldStartAt:
		m.ResetStartAt()
		return nil
	case run.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case run.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	case run.FieldError:
		m.ResetError()
		return nil
	}
	return fmt.Errorf("unknown Run field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RunMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RunMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RunMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RunMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RunMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Run unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RunMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Run edge %s", name)
}

// StepRunMutation represents an operation that mutate the StepRuns
// nodes in the graph.
type StepRunMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	startAt              *time.Time
	endedAt              *time.Time
	participantsCount    *int
	addparticipantsCount *int
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*StepRun, error)
}

var _ ent.Mutation = (*StepRunMutation)(nil)

// steprunOption allows to manage the mutation configuration using functional options.
type steprunOption func(*StepRunMutation)

// newStepRunMutation creates new mutation for $n.Name.
func newStepRunMutation(c config, op Op, opts ...steprunOption) *StepRunMutation {
	m := &StepRunMutation{
		config:        c,
		op:            op,
		typ:           TypeStepRun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStepRunID sets the id field of the mutation.
func withStepRunID(id int) steprunOption {
	return func(m *StepRunMutation) {
		var (
			err   error
			once  sync.Once
			value *StepRun
		)
		m.oldValue = func(ctx context.Context) (*StepRun, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StepRun.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStepRun sets the old StepRun of the mutation.
func withStepRun(node *StepRun) steprunOption {
	return func(m *StepRunMutation) {
		m.oldValue = func(context.Context) (*StepRun, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StepRunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StepRunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StepRunMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStartAt sets the startAt field.
func (m *StepRunMutation) SetStartAt(t time.Time) {
	m.startAt = &t
}

// StartAt returns the startAt value in the mutation.
func (m *StepRunMutation) StartAt() (r time.Time, exists bool) {
	v := m.startAt
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old startAt value of the StepRun.
// If the StepRun object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StepRunMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt reset all changes of the "startAt" field.
func (m *StepRunMutation) ResetStartAt() {
	m.startAt = nil
}

// SetEndedAt sets the endedAt field.
func (m *StepRunMutation) SetEndedAt(t time.Time) {
	m.endedAt = &t
}

// EndedAt returns the endedAt value in the mutation.
func (m *StepRunMutation) EndedAt() (r time.Time, exists bool) {
	v := m.endedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old endedAt value of the StepRun.
// If the StepRun object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StepRunMutation) OldEndedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEndedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// ResetEndedAt reset all changes of the "endedAt" field.
func (m *StepRunMutation) ResetEndedAt() {
	m.endedAt = nil
}

// SetParticipantsCount sets the participantsCount field.
func (m *StepRunMutation) SetParticipantsCount(i int) {
	m.participantsCount = &i
	m.addparticipantsCount = nil
}

// ParticipantsCount returns the participantsCount value in the mutation.
func (m *StepRunMutation) ParticipantsCount() (r int, exists bool) {
	v := m.participantsCount
	if v == nil {
		return
	}
	return *v, true
}

// OldParticipantsCount returns the old participantsCount value of the StepRun.
// If the StepRun object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StepRunMutation) OldParticipantsCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldParticipantsCount is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldParticipantsCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParticipantsCount: %w", err)
	}
	return oldValue.ParticipantsCount, nil
}

// AddParticipantsCount adds i to participantsCount.
func (m *StepRunMutation) AddParticipantsCount(i int) {
	if m.addparticipantsCount != nil {
		*m.addparticipantsCount += i
	} else {
		m.addparticipantsCount = &i
	}
}

// AddedParticipantsCount returns the value that was added to the participantsCount field in this mutation.
func (m *StepRunMutation) AddedParticipantsCount() (r int, exists bool) {
	v := m.addparticipantsCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetParticipantsCount reset all changes of the "participantsCount" field.
func (m *StepRunMutation) ResetParticipantsCount() {
	m.participantsCount = nil
	m.addparticipantsCount = nil
}

// Op returns the operation name.
func (m *StepRunMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StepRun).
func (m *StepRunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StepRunMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.startAt != nil {
		fields = append(fields, steprun.FieldStartAt)
	}
	if m.endedAt != nil {
		fields = append(fields, steprun.FieldEndedAt)
	}
	if m.participantsCount != nil {
		fields = append(fields, steprun.FieldParticipantsCount)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StepRunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case steprun.FieldStartAt:
		return m.StartAt()
	case steprun.FieldEndedAt:
		return m.EndedAt()
	case steprun.FieldParticipantsCount:
		return m.ParticipantsCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StepRunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case steprun.FieldStartAt:
		return m.OldStartAt(ctx)
	case steprun.FieldEndedAt:
		return m.OldEndedAt(ctx)
	case steprun.FieldParticipantsCount:
		return m.OldParticipantsCount(ctx)
	}
	return nil, fmt.Errorf("unknown StepRun field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StepRunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case steprun.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case steprun.FieldEndedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	case steprun.FieldParticipantsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParticipantsCount(v)
		return nil
	}
	return fmt.Errorf("unknown StepRun field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StepRunMutation) AddedFields() []string {
	var fields []string
	if m.addparticipantsCount != nil {
		fields = append(fields, steprun.FieldParticipantsCount)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StepRunMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case steprun.FieldParticipantsCount:
		return m.AddedParticipantsCount()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StepRunMutation) AddField(name string, value ent.Value) error {
	switch name {
	case steprun.FieldParticipantsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParticipantsCount(v)
		return nil
	}
	return fmt.Errorf("unknown StepRun numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StepRunMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StepRunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StepRunMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StepRun nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StepRunMutation) ResetField(name string) error {
	switch name {
	case steprun.FieldStartAt:
		m.ResetStartAt()
		return nil
	case steprun.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	case steprun.FieldParticipantsCount:
		m.ResetParticipantsCount()
		return nil
	}
	return fmt.Errorf("unknown StepRun field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StepRunMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StepRunMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StepRunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StepRunMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StepRunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StepRunMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StepRunMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StepRun unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StepRunMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StepRun edge %s", name)
}
