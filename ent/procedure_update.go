// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/ent/predicate"
	"github.com/empiricaly/recruitment/ent/procedure"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ProcedureUpdate is the builder for updating Procedure entities.
type ProcedureUpdate struct {
	config
	hooks      []Hook
	mutation   *ProcedureMutation
	predicates []predicate.Procedure
}

// Where adds a new predicate for the builder.
func (pu *ProcedureUpdate) Where(ps ...predicate.Procedure) *ProcedureUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updatedAt field.
func (pu *ProcedureUpdate) SetUpdatedAt(t time.Time) *ProcedureUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the name field.
func (pu *ProcedureUpdate) SetName(s string) *ProcedureUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetParticipantCount sets the participantCount field.
func (pu *ProcedureUpdate) SetParticipantCount(s string) *ProcedureUpdate {
	pu.mutation.SetParticipantCount(s)
	return pu
}

// SetAdult sets the adult field.
func (pu *ProcedureUpdate) SetAdult(b bool) *ProcedureUpdate {
	pu.mutation.SetAdult(b)
	return pu
}

// Mutation returns the ProcedureMutation object of the builder.
func (pu *ProcedureUpdate) Mutation() *ProcedureMutation {
	return pu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProcedureUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := procedure.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcedureUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcedureUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcedureUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProcedureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procedure.Table,
			Columns: procedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: procedure.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procedure.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldName,
		})
	}
	if value, ok := pu.mutation.ParticipantCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldParticipantCount,
		})
	}
	if value, ok := pu.mutation.Adult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: procedure.FieldAdult,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProcedureUpdateOne is the builder for updating a single Procedure entity.
type ProcedureUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProcedureMutation
}

// SetUpdatedAt sets the updatedAt field.
func (puo *ProcedureUpdateOne) SetUpdatedAt(t time.Time) *ProcedureUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the name field.
func (puo *ProcedureUpdateOne) SetName(s string) *ProcedureUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetParticipantCount sets the participantCount field.
func (puo *ProcedureUpdateOne) SetParticipantCount(s string) *ProcedureUpdateOne {
	puo.mutation.SetParticipantCount(s)
	return puo
}

// SetAdult sets the adult field.
func (puo *ProcedureUpdateOne) SetAdult(b bool) *ProcedureUpdateOne {
	puo.mutation.SetAdult(b)
	return puo
}

// Mutation returns the ProcedureMutation object of the builder.
func (puo *ProcedureUpdateOne) Mutation() *ProcedureMutation {
	return puo.mutation
}

// Save executes the query and returns the updated entity.
func (puo *ProcedureUpdateOne) Save(ctx context.Context) (*Procedure, error) {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := procedure.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *Procedure
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcedureUpdateOne) SaveX(ctx context.Context) *Procedure {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProcedureUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcedureUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProcedureUpdateOne) sqlSave(ctx context.Context) (pr *Procedure, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procedure.Table,
			Columns: procedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: procedure.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Procedure.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procedure.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldName,
		})
	}
	if value, ok := puo.mutation.ParticipantCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldParticipantCount,
		})
	}
	if value, ok := puo.mutation.Adult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: procedure.FieldAdult,
		})
	}
	pr = &Procedure{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
