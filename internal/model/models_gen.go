// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

// Node is an interface allowing simple querying of any node
type Node interface {
	IsNode()
}

// User is a user that has priviledged access to the data.
type User struct {
	// id is the unique globally identifier for the record.
	ID string `json:"id"`
	// createdAt is the time of creation of the record.
	CreatedAt time.Time `json:"createdAt"`
	// updatedAt is the time of last update of the record.
	UpdatedAt time.Time `json:"updatedAt"`
	// name is the full name of the user.
	Name *string `json:"name"`
	// email is the email associated with the user.
	Email string `json:"email"`
	// password is the hashed password associated with the user.
	Password string `json:"password"`
}

func (User) IsNode() {}

type Role string

const (
	RoleAdmin  Role = "ADMIN"
	RolePlayer Role = "PLAYER"
)

var AllRole = []Role{
	RoleAdmin,
	RolePlayer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RolePlayer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status of Batches and Games
type Status string

const (
	// INVALID is used to avoid non-explicit setting of the status (0 value)
	StatusInvalid Status = "INVALID"
	// UNSET allows to nullify the status
	StatusUnset Status = "UNSET"
	// CREATED means the run has been created but hasn't started yet
	StatusCreated Status = "CREATED"
	// RUNNING means the run is currently in progress
	StatusRunning Status = "RUNNING"
	// PAUSED means the run has been paused by an admin
	StatusPaused Status = "PAUSED"
	// DONE means the run has finished `naturally`
	StatusDone Status = "DONE"
	// TERMINATED means the run has been manually cancelled
	StatusTerminated Status = "TERMINATED"
	// FAILED means the run has failed (due to an unrecoverable error)
	StatusFailed Status = "FAILED"
)

var AllStatus = []Status{
	StatusInvalid,
	StatusUnset,
	StatusCreated,
	StatusRunning,
	StatusPaused,
	StatusDone,
	StatusTerminated,
	StatusFailed,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusInvalid, StatusUnset, StatusCreated, StatusRunning, StatusPaused, StatusDone, StatusTerminated, StatusFailed:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
