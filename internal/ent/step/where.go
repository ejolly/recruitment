// Code generated by entc, DO NOT EDIT.

package step

import (
	"time"

	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// MsgArgs applies equality check predicate on the "msgArgs" field. It's identical to MsgArgsEQ.
func MsgArgs(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgArgs), v))
	})
}

// HitArgs applies equality check predicate on the "hitArgs" field. It's identical to HitArgsEQ.
func HitArgs(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHitArgs), v))
	})
}

// FilterArgs applies equality check predicate on the "filterArgs" field. It's identical to FilterArgsEQ.
func FilterArgs(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilterArgs), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndex), v))
	})
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIndex), v...))
	})
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIndex), v...))
	})
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndex), v))
	})
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndex), v))
	})
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndex), v))
	})
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndex), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// MsgArgsEQ applies the EQ predicate on the "msgArgs" field.
func MsgArgsEQ(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsgArgs), v))
	})
}

// MsgArgsNEQ applies the NEQ predicate on the "msgArgs" field.
func MsgArgsNEQ(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsgArgs), v))
	})
}

// MsgArgsIn applies the In predicate on the "msgArgs" field.
func MsgArgsIn(vs ...[]byte) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsgArgs), v...))
	})
}

// MsgArgsNotIn applies the NotIn predicate on the "msgArgs" field.
func MsgArgsNotIn(vs ...[]byte) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsgArgs), v...))
	})
}

// MsgArgsGT applies the GT predicate on the "msgArgs" field.
func MsgArgsGT(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsgArgs), v))
	})
}

// MsgArgsGTE applies the GTE predicate on the "msgArgs" field.
func MsgArgsGTE(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsgArgs), v))
	})
}

// MsgArgsLT applies the LT predicate on the "msgArgs" field.
func MsgArgsLT(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsgArgs), v))
	})
}

// MsgArgsLTE applies the LTE predicate on the "msgArgs" field.
func MsgArgsLTE(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsgArgs), v))
	})
}

// MsgArgsIsNil applies the IsNil predicate on the "msgArgs" field.
func MsgArgsIsNil() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMsgArgs)))
	})
}

// MsgArgsNotNil applies the NotNil predicate on the "msgArgs" field.
func MsgArgsNotNil() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMsgArgs)))
	})
}

// HitArgsEQ applies the EQ predicate on the "hitArgs" field.
func HitArgsEQ(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHitArgs), v))
	})
}

// HitArgsNEQ applies the NEQ predicate on the "hitArgs" field.
func HitArgsNEQ(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHitArgs), v))
	})
}

// HitArgsIn applies the In predicate on the "hitArgs" field.
func HitArgsIn(vs ...[]byte) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHitArgs), v...))
	})
}

// HitArgsNotIn applies the NotIn predicate on the "hitArgs" field.
func HitArgsNotIn(vs ...[]byte) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHitArgs), v...))
	})
}

// HitArgsGT applies the GT predicate on the "hitArgs" field.
func HitArgsGT(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHitArgs), v))
	})
}

// HitArgsGTE applies the GTE predicate on the "hitArgs" field.
func HitArgsGTE(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHitArgs), v))
	})
}

// HitArgsLT applies the LT predicate on the "hitArgs" field.
func HitArgsLT(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHitArgs), v))
	})
}

// HitArgsLTE applies the LTE predicate on the "hitArgs" field.
func HitArgsLTE(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHitArgs), v))
	})
}

// HitArgsIsNil applies the IsNil predicate on the "hitArgs" field.
func HitArgsIsNil() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHitArgs)))
	})
}

// HitArgsNotNil applies the NotNil predicate on the "hitArgs" field.
func HitArgsNotNil() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHitArgs)))
	})
}

// FilterArgsEQ applies the EQ predicate on the "filterArgs" field.
func FilterArgsEQ(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilterArgs), v))
	})
}

// FilterArgsNEQ applies the NEQ predicate on the "filterArgs" field.
func FilterArgsNEQ(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilterArgs), v))
	})
}

// FilterArgsIn applies the In predicate on the "filterArgs" field.
func FilterArgsIn(vs ...[]byte) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilterArgs), v...))
	})
}

// FilterArgsNotIn applies the NotIn predicate on the "filterArgs" field.
func FilterArgsNotIn(vs ...[]byte) predicate.Step {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Step(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilterArgs), v...))
	})
}

// FilterArgsGT applies the GT predicate on the "filterArgs" field.
func FilterArgsGT(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilterArgs), v))
	})
}

// FilterArgsGTE applies the GTE predicate on the "filterArgs" field.
func FilterArgsGTE(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilterArgs), v))
	})
}

// FilterArgsLT applies the LT predicate on the "filterArgs" field.
func FilterArgsLT(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilterArgs), v))
	})
}

// FilterArgsLTE applies the LTE predicate on the "filterArgs" field.
func FilterArgsLTE(v []byte) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilterArgs), v))
	})
}

// FilterArgsIsNil applies the IsNil predicate on the "filterArgs" field.
func FilterArgsIsNil() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilterArgs)))
	})
}

// FilterArgsNotNil applies the NotNil predicate on the "filterArgs" field.
func FilterArgsNotNil() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilterArgs)))
	})
}

// HasProcedure applies the HasEdge predicate on the "procedure" edge.
func HasProcedure() predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProcedureTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProcedureTable, ProcedureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProcedureWith applies the HasEdge predicate on the "procedure" edge with a given conditions (other predicates).
func HasProcedureWith(preds ...predicate.Procedure) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProcedureInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProcedureTable, ProcedureColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Step) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Step) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Step) predicate.Step {
	return predicate.Step(func(s *sql.Selector) {
		p(s.Not())
	})
}
