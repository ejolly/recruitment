// Code generated by entc, DO NOT EDIT.

package participation

import (
	"time"

	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// AddedParticipant applies equality check predicate on the "addedParticipant" field. It's identical to AddedParticipantEQ.
func AddedParticipant(v bool) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedParticipant), v))
	})
}

// MturkWorkerID applies equality check predicate on the "mturkWorkerID" field. It's identical to MturkWorkerIDEQ.
func MturkWorkerID(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkWorkerID), v))
	})
}

// MturkAssignmentID applies equality check predicate on the "mturkAssignmentID" field. It's identical to MturkAssignmentIDEQ.
func MturkAssignmentID(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkHitID applies equality check predicate on the "mturkHitID" field. It's identical to MturkHitIDEQ.
func MturkHitID(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkHitID), v))
	})
}

// MturkAcceptedAt applies equality check predicate on the "mturkAcceptedAt" field. It's identical to MturkAcceptedAtEQ.
func MturkAcceptedAt(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkSubmittedAt applies equality check predicate on the "mturkSubmittedAt" field. It's identical to MturkSubmittedAtEQ.
func MturkSubmittedAt(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkSubmittedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// AddedParticipantEQ applies the EQ predicate on the "addedParticipant" field.
func AddedParticipantEQ(v bool) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedParticipant), v))
	})
}

// AddedParticipantNEQ applies the NEQ predicate on the "addedParticipant" field.
func AddedParticipantNEQ(v bool) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedParticipant), v))
	})
}

// MturkWorkerIDEQ applies the EQ predicate on the "mturkWorkerID" field.
func MturkWorkerIDEQ(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDNEQ applies the NEQ predicate on the "mturkWorkerID" field.
func MturkWorkerIDNEQ(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDIn applies the In predicate on the "mturkWorkerID" field.
func MturkWorkerIDIn(vs ...string) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMturkWorkerID), v...))
	})
}

// MturkWorkerIDNotIn applies the NotIn predicate on the "mturkWorkerID" field.
func MturkWorkerIDNotIn(vs ...string) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMturkWorkerID), v...))
	})
}

// MturkWorkerIDGT applies the GT predicate on the "mturkWorkerID" field.
func MturkWorkerIDGT(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDGTE applies the GTE predicate on the "mturkWorkerID" field.
func MturkWorkerIDGTE(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDLT applies the LT predicate on the "mturkWorkerID" field.
func MturkWorkerIDLT(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDLTE applies the LTE predicate on the "mturkWorkerID" field.
func MturkWorkerIDLTE(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDContains applies the Contains predicate on the "mturkWorkerID" field.
func MturkWorkerIDContains(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDHasPrefix applies the HasPrefix predicate on the "mturkWorkerID" field.
func MturkWorkerIDHasPrefix(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDHasSuffix applies the HasSuffix predicate on the "mturkWorkerID" field.
func MturkWorkerIDHasSuffix(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDEqualFold applies the EqualFold predicate on the "mturkWorkerID" field.
func MturkWorkerIDEqualFold(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMturkWorkerID), v))
	})
}

// MturkWorkerIDContainsFold applies the ContainsFold predicate on the "mturkWorkerID" field.
func MturkWorkerIDContainsFold(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMturkWorkerID), v))
	})
}

// MturkAssignmentIDEQ applies the EQ predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDEQ(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDNEQ applies the NEQ predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDNEQ(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDIn applies the In predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDIn(vs ...string) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMturkAssignmentID), v...))
	})
}

// MturkAssignmentIDNotIn applies the NotIn predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDNotIn(vs ...string) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMturkAssignmentID), v...))
	})
}

// MturkAssignmentIDGT applies the GT predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDGT(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDGTE applies the GTE predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDGTE(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDLT applies the LT predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDLT(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDLTE applies the LTE predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDLTE(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDContains applies the Contains predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDContains(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDHasPrefix applies the HasPrefix predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDHasPrefix(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDHasSuffix applies the HasSuffix predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDHasSuffix(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDEqualFold applies the EqualFold predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDEqualFold(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkAssignmentIDContainsFold applies the ContainsFold predicate on the "mturkAssignmentID" field.
func MturkAssignmentIDContainsFold(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMturkAssignmentID), v))
	})
}

// MturkHitIDEQ applies the EQ predicate on the "mturkHitID" field.
func MturkHitIDEQ(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDNEQ applies the NEQ predicate on the "mturkHitID" field.
func MturkHitIDNEQ(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDIn applies the In predicate on the "mturkHitID" field.
func MturkHitIDIn(vs ...string) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMturkHitID), v...))
	})
}

// MturkHitIDNotIn applies the NotIn predicate on the "mturkHitID" field.
func MturkHitIDNotIn(vs ...string) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMturkHitID), v...))
	})
}

// MturkHitIDGT applies the GT predicate on the "mturkHitID" field.
func MturkHitIDGT(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDGTE applies the GTE predicate on the "mturkHitID" field.
func MturkHitIDGTE(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDLT applies the LT predicate on the "mturkHitID" field.
func MturkHitIDLT(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDLTE applies the LTE predicate on the "mturkHitID" field.
func MturkHitIDLTE(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDContains applies the Contains predicate on the "mturkHitID" field.
func MturkHitIDContains(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDHasPrefix applies the HasPrefix predicate on the "mturkHitID" field.
func MturkHitIDHasPrefix(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDHasSuffix applies the HasSuffix predicate on the "mturkHitID" field.
func MturkHitIDHasSuffix(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDEqualFold applies the EqualFold predicate on the "mturkHitID" field.
func MturkHitIDEqualFold(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMturkHitID), v))
	})
}

// MturkHitIDContainsFold applies the ContainsFold predicate on the "mturkHitID" field.
func MturkHitIDContainsFold(v string) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMturkHitID), v))
	})
}

// MturkAcceptedAtEQ applies the EQ predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkAcceptedAtNEQ applies the NEQ predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtNEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkAcceptedAtIn applies the In predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMturkAcceptedAt), v...))
	})
}

// MturkAcceptedAtNotIn applies the NotIn predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtNotIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMturkAcceptedAt), v...))
	})
}

// MturkAcceptedAtGT applies the GT predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtGT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkAcceptedAtGTE applies the GTE predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtGTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkAcceptedAtLT applies the LT predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtLT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkAcceptedAtLTE applies the LTE predicate on the "mturkAcceptedAt" field.
func MturkAcceptedAtLTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMturkAcceptedAt), v))
	})
}

// MturkSubmittedAtEQ applies the EQ predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMturkSubmittedAt), v))
	})
}

// MturkSubmittedAtNEQ applies the NEQ predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtNEQ(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMturkSubmittedAt), v))
	})
}

// MturkSubmittedAtIn applies the In predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMturkSubmittedAt), v...))
	})
}

// MturkSubmittedAtNotIn applies the NotIn predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtNotIn(vs ...time.Time) predicate.Participation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Participation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMturkSubmittedAt), v...))
	})
}

// MturkSubmittedAtGT applies the GT predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtGT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMturkSubmittedAt), v))
	})
}

// MturkSubmittedAtGTE applies the GTE predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtGTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMturkSubmittedAt), v))
	})
}

// MturkSubmittedAtLT applies the LT predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtLT(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMturkSubmittedAt), v))
	})
}

// MturkSubmittedAtLTE applies the LTE predicate on the "mturkSubmittedAt" field.
func MturkSubmittedAtLTE(v time.Time) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMturkSubmittedAt), v))
	})
}

// HasStepRun applies the HasEdge predicate on the "stepRun" edge.
func HasStepRun() predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StepRunTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StepRunTable, StepRunColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStepRunWith applies the HasEdge predicate on the "stepRun" edge with a given conditions (other predicates).
func HasStepRunWith(preds ...predicate.StepRun) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StepRunInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StepRunTable, StepRunColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipant applies the HasEdge predicate on the "participant" edge.
func HasParticipant() predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParticipantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParticipantTable, ParticipantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantWith applies the HasEdge predicate on the "participant" edge with a given conditions (other predicates).
func HasParticipantWith(preds ...predicate.Participant) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParticipantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParticipantTable, ParticipantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Participation) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Participation) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Participation) predicate.Participation {
	return predicate.Participation(func(s *sql.Selector) {
		p(s.Not())
	})
}
