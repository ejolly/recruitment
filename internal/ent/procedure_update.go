// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/admin"
	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/empiricaly/recruitment/internal/ent/procedure"
	"github.com/empiricaly/recruitment/internal/ent/project"
	"github.com/empiricaly/recruitment/internal/ent/run"
	"github.com/empiricaly/recruitment/internal/ent/step"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ProcedureUpdate is the builder for updating Procedure entities.
type ProcedureUpdate struct {
	config
	hooks      []Hook
	mutation   *ProcedureMutation
	predicates []predicate.Procedure
}

// Where adds a new predicate for the builder.
func (pu *ProcedureUpdate) Where(ps ...predicate.Procedure) *ProcedureUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updatedAt field.
func (pu *ProcedureUpdate) SetUpdatedAt(t time.Time) *ProcedureUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the name field.
func (pu *ProcedureUpdate) SetName(s string) *ProcedureUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetSelectionType sets the selectionType field.
func (pu *ProcedureUpdate) SetSelectionType(s string) *ProcedureUpdate {
	pu.mutation.SetSelectionType(s)
	return pu
}

// SetParticipantCount sets the participantCount field.
func (pu *ProcedureUpdate) SetParticipantCount(i int) *ProcedureUpdate {
	pu.mutation.ResetParticipantCount()
	pu.mutation.SetParticipantCount(i)
	return pu
}

// SetNillableParticipantCount sets the participantCount field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableParticipantCount(i *int) *ProcedureUpdate {
	if i != nil {
		pu.SetParticipantCount(*i)
	}
	return pu
}

// AddParticipantCount adds i to participantCount.
func (pu *ProcedureUpdate) AddParticipantCount(i int) *ProcedureUpdate {
	pu.mutation.AddParticipantCount(i)
	return pu
}

// SetInternalCriteria sets the internalCriteria field.
func (pu *ProcedureUpdate) SetInternalCriteria(b []byte) *ProcedureUpdate {
	pu.mutation.SetInternalCriteria(b)
	return pu
}

// SetMturkCriteria sets the mturkCriteria field.
func (pu *ProcedureUpdate) SetMturkCriteria(b []byte) *ProcedureUpdate {
	pu.mutation.SetMturkCriteria(b)
	return pu
}

// SetAdult sets the adult field.
func (pu *ProcedureUpdate) SetAdult(b bool) *ProcedureUpdate {
	pu.mutation.SetAdult(b)
	return pu
}

// SetNillableAdult sets the adult field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableAdult(b *bool) *ProcedureUpdate {
	if b != nil {
		pu.SetAdult(*b)
	}
	return pu
}

// AddStepIDs adds the steps edge to Step by ids.
func (pu *ProcedureUpdate) AddStepIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddStepIDs(ids...)
	return pu
}

// AddSteps adds the steps edges to Step.
func (pu *ProcedureUpdate) AddSteps(s ...*Step) *ProcedureUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddStepIDs(ids...)
}

// SetProjectID sets the project edge to Project by id.
func (pu *ProcedureUpdate) SetProjectID(id string) *ProcedureUpdate {
	pu.mutation.SetProjectID(id)
	return pu
}

// SetNillableProjectID sets the project edge to Project by id if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableProjectID(id *string) *ProcedureUpdate {
	if id != nil {
		pu = pu.SetProjectID(*id)
	}
	return pu
}

// SetProject sets the project edge to Project.
func (pu *ProcedureUpdate) SetProject(p *Project) *ProcedureUpdate {
	return pu.SetProjectID(p.ID)
}

// SetCreatorID sets the creator edge to Admin by id.
func (pu *ProcedureUpdate) SetCreatorID(id string) *ProcedureUpdate {
	pu.mutation.SetCreatorID(id)
	return pu
}

// SetNillableCreatorID sets the creator edge to Admin by id if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableCreatorID(id *string) *ProcedureUpdate {
	if id != nil {
		pu = pu.SetCreatorID(*id)
	}
	return pu
}

// SetCreator sets the creator edge to Admin.
func (pu *ProcedureUpdate) SetCreator(a *Admin) *ProcedureUpdate {
	return pu.SetCreatorID(a.ID)
}

// SetRunID sets the run edge to Run by id.
func (pu *ProcedureUpdate) SetRunID(id string) *ProcedureUpdate {
	pu.mutation.SetRunID(id)
	return pu
}

// SetNillableRunID sets the run edge to Run by id if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableRunID(id *string) *ProcedureUpdate {
	if id != nil {
		pu = pu.SetRunID(*id)
	}
	return pu
}

// SetRun sets the run edge to Run.
func (pu *ProcedureUpdate) SetRun(r *Run) *ProcedureUpdate {
	return pu.SetRunID(r.ID)
}

// Mutation returns the ProcedureMutation object of the builder.
func (pu *ProcedureUpdate) Mutation() *ProcedureMutation {
	return pu.mutation
}

// RemoveStepIDs removes the steps edge to Step by ids.
func (pu *ProcedureUpdate) RemoveStepIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveStepIDs(ids...)
	return pu
}

// RemoveSteps removes steps edges to Step.
func (pu *ProcedureUpdate) RemoveSteps(s ...*Step) *ProcedureUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveStepIDs(ids...)
}

// ClearProject clears the project edge to Project.
func (pu *ProcedureUpdate) ClearProject() *ProcedureUpdate {
	pu.mutation.ClearProject()
	return pu
}

// ClearCreator clears the creator edge to Admin.
func (pu *ProcedureUpdate) ClearCreator() *ProcedureUpdate {
	pu.mutation.ClearCreator()
	return pu
}

// ClearRun clears the run edge to Run.
func (pu *ProcedureUpdate) ClearRun() *ProcedureUpdate {
	pu.mutation.ClearRun()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ProcedureUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := procedure.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ParticipantCount(); ok {
		if err := procedure.ParticipantCountValidator(v); err != nil {
			return 0, &ValidationError{Name: "participantCount", err: fmt.Errorf("ent: validator failed for field \"participantCount\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcedureUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcedureUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcedureUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProcedureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procedure.Table,
			Columns: procedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: procedure.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procedure.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldName,
		})
	}
	if value, ok := pu.mutation.SelectionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldSelectionType,
		})
	}
	if value, ok := pu.mutation.ParticipantCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: procedure.FieldParticipantCount,
		})
	}
	if value, ok := pu.mutation.AddedParticipantCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: procedure.FieldParticipantCount,
		})
	}
	if value, ok := pu.mutation.InternalCriteria(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: procedure.FieldInternalCriteria,
		})
	}
	if value, ok := pu.mutation.MturkCriteria(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: procedure.FieldMturkCriteria,
		})
	}
	if value, ok := pu.mutation.Adult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: procedure.FieldAdult,
		})
	}
	if nodes := pu.mutation.RemovedStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.StepsTable,
			Columns: []string{procedure.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: step.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.StepsTable,
			Columns: []string{procedure.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: step.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.ProjectTable,
			Columns: []string{procedure.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.ProjectTable,
			Columns: []string{procedure.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.CreatorTable,
			Columns: []string{procedure.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.CreatorTable,
			Columns: []string{procedure.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   procedure.RunTable,
			Columns: []string{procedure.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: run.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   procedure.RunTable,
			Columns: []string{procedure.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: run.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProcedureUpdateOne is the builder for updating a single Procedure entity.
type ProcedureUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProcedureMutation
}

// SetUpdatedAt sets the updatedAt field.
func (puo *ProcedureUpdateOne) SetUpdatedAt(t time.Time) *ProcedureUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the name field.
func (puo *ProcedureUpdateOne) SetName(s string) *ProcedureUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetSelectionType sets the selectionType field.
func (puo *ProcedureUpdateOne) SetSelectionType(s string) *ProcedureUpdateOne {
	puo.mutation.SetSelectionType(s)
	return puo
}

// SetParticipantCount sets the participantCount field.
func (puo *ProcedureUpdateOne) SetParticipantCount(i int) *ProcedureUpdateOne {
	puo.mutation.ResetParticipantCount()
	puo.mutation.SetParticipantCount(i)
	return puo
}

// SetNillableParticipantCount sets the participantCount field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableParticipantCount(i *int) *ProcedureUpdateOne {
	if i != nil {
		puo.SetParticipantCount(*i)
	}
	return puo
}

// AddParticipantCount adds i to participantCount.
func (puo *ProcedureUpdateOne) AddParticipantCount(i int) *ProcedureUpdateOne {
	puo.mutation.AddParticipantCount(i)
	return puo
}

// SetInternalCriteria sets the internalCriteria field.
func (puo *ProcedureUpdateOne) SetInternalCriteria(b []byte) *ProcedureUpdateOne {
	puo.mutation.SetInternalCriteria(b)
	return puo
}

// SetMturkCriteria sets the mturkCriteria field.
func (puo *ProcedureUpdateOne) SetMturkCriteria(b []byte) *ProcedureUpdateOne {
	puo.mutation.SetMturkCriteria(b)
	return puo
}

// SetAdult sets the adult field.
func (puo *ProcedureUpdateOne) SetAdult(b bool) *ProcedureUpdateOne {
	puo.mutation.SetAdult(b)
	return puo
}

// SetNillableAdult sets the adult field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableAdult(b *bool) *ProcedureUpdateOne {
	if b != nil {
		puo.SetAdult(*b)
	}
	return puo
}

// AddStepIDs adds the steps edge to Step by ids.
func (puo *ProcedureUpdateOne) AddStepIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddStepIDs(ids...)
	return puo
}

// AddSteps adds the steps edges to Step.
func (puo *ProcedureUpdateOne) AddSteps(s ...*Step) *ProcedureUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddStepIDs(ids...)
}

// SetProjectID sets the project edge to Project by id.
func (puo *ProcedureUpdateOne) SetProjectID(id string) *ProcedureUpdateOne {
	puo.mutation.SetProjectID(id)
	return puo
}

// SetNillableProjectID sets the project edge to Project by id if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableProjectID(id *string) *ProcedureUpdateOne {
	if id != nil {
		puo = puo.SetProjectID(*id)
	}
	return puo
}

// SetProject sets the project edge to Project.
func (puo *ProcedureUpdateOne) SetProject(p *Project) *ProcedureUpdateOne {
	return puo.SetProjectID(p.ID)
}

// SetCreatorID sets the creator edge to Admin by id.
func (puo *ProcedureUpdateOne) SetCreatorID(id string) *ProcedureUpdateOne {
	puo.mutation.SetCreatorID(id)
	return puo
}

// SetNillableCreatorID sets the creator edge to Admin by id if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableCreatorID(id *string) *ProcedureUpdateOne {
	if id != nil {
		puo = puo.SetCreatorID(*id)
	}
	return puo
}

// SetCreator sets the creator edge to Admin.
func (puo *ProcedureUpdateOne) SetCreator(a *Admin) *ProcedureUpdateOne {
	return puo.SetCreatorID(a.ID)
}

// SetRunID sets the run edge to Run by id.
func (puo *ProcedureUpdateOne) SetRunID(id string) *ProcedureUpdateOne {
	puo.mutation.SetRunID(id)
	return puo
}

// SetNillableRunID sets the run edge to Run by id if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableRunID(id *string) *ProcedureUpdateOne {
	if id != nil {
		puo = puo.SetRunID(*id)
	}
	return puo
}

// SetRun sets the run edge to Run.
func (puo *ProcedureUpdateOne) SetRun(r *Run) *ProcedureUpdateOne {
	return puo.SetRunID(r.ID)
}

// Mutation returns the ProcedureMutation object of the builder.
func (puo *ProcedureUpdateOne) Mutation() *ProcedureMutation {
	return puo.mutation
}

// RemoveStepIDs removes the steps edge to Step by ids.
func (puo *ProcedureUpdateOne) RemoveStepIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveStepIDs(ids...)
	return puo
}

// RemoveSteps removes steps edges to Step.
func (puo *ProcedureUpdateOne) RemoveSteps(s ...*Step) *ProcedureUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveStepIDs(ids...)
}

// ClearProject clears the project edge to Project.
func (puo *ProcedureUpdateOne) ClearProject() *ProcedureUpdateOne {
	puo.mutation.ClearProject()
	return puo
}

// ClearCreator clears the creator edge to Admin.
func (puo *ProcedureUpdateOne) ClearCreator() *ProcedureUpdateOne {
	puo.mutation.ClearCreator()
	return puo
}

// ClearRun clears the run edge to Run.
func (puo *ProcedureUpdateOne) ClearRun() *ProcedureUpdateOne {
	puo.mutation.ClearRun()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *ProcedureUpdateOne) Save(ctx context.Context) (*Procedure, error) {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := procedure.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ParticipantCount(); ok {
		if err := procedure.ParticipantCountValidator(v); err != nil {
			return nil, &ValidationError{Name: "participantCount", err: fmt.Errorf("ent: validator failed for field \"participantCount\": %w", err)}
		}
	}

	var (
		err  error
		node *Procedure
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcedureUpdateOne) SaveX(ctx context.Context) *Procedure {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *ProcedureUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcedureUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProcedureUpdateOne) sqlSave(ctx context.Context) (pr *Procedure, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procedure.Table,
			Columns: procedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: procedure.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Procedure.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procedure.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldName,
		})
	}
	if value, ok := puo.mutation.SelectionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procedure.FieldSelectionType,
		})
	}
	if value, ok := puo.mutation.ParticipantCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: procedure.FieldParticipantCount,
		})
	}
	if value, ok := puo.mutation.AddedParticipantCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: procedure.FieldParticipantCount,
		})
	}
	if value, ok := puo.mutation.InternalCriteria(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: procedure.FieldInternalCriteria,
		})
	}
	if value, ok := puo.mutation.MturkCriteria(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: procedure.FieldMturkCriteria,
		})
	}
	if value, ok := puo.mutation.Adult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: procedure.FieldAdult,
		})
	}
	if nodes := puo.mutation.RemovedStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.StepsTable,
			Columns: []string{procedure.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: step.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.StepsTable,
			Columns: []string{procedure.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: step.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.ProjectTable,
			Columns: []string{procedure.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.ProjectTable,
			Columns: []string{procedure.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.CreatorTable,
			Columns: []string{procedure.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.CreatorTable,
			Columns: []string{procedure.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   procedure.RunTable,
			Columns: []string{procedure.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: run.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   procedure.RunTable,
			Columns: []string{procedure.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: run.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Procedure{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
