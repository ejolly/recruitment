// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql"
)

// StepRun is the model entity for the StepRun schema.
type StepRun struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// StartAt holds the value of the "startAt" field.
	StartAt time.Time `json:"startAt,omitempty"`
	// EndedAt holds the value of the "endedAt" field.
	EndedAt time.Time `json:"endedAt,omitempty"`
	// ParticipantsCount holds the value of the "participantsCount" field.
	ParticipantsCount int `json:"participantsCount,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StepRun) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
		&sql.NullTime{},   // startAt
		&sql.NullTime{},   // endedAt
		&sql.NullInt64{},  // participantsCount
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StepRun fields.
func (sr *StepRun) assignValues(values ...interface{}) error {
	if m, n := len(values), len(steprun.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		sr.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[0])
	} else if value.Valid {
		sr.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[1])
	} else if value.Valid {
		sr.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field startAt", values[2])
	} else if value.Valid {
		sr.StartAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endedAt", values[3])
	} else if value.Valid {
		sr.EndedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field participantsCount", values[4])
	} else if value.Valid {
		sr.ParticipantsCount = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this StepRun.
// Note that, you need to call StepRun.Unwrap() before calling this method, if this StepRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StepRun) Update() *StepRunUpdateOne {
	return (&StepRunClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sr *StepRun) Unwrap() *StepRun {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StepRun is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StepRun) String() string {
	var builder strings.Builder
	builder.WriteString("StepRun(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", startAt=")
	builder.WriteString(sr.StartAt.Format(time.ANSIC))
	builder.WriteString(", endedAt=")
	builder.WriteString(sr.EndedAt.Format(time.ANSIC))
	builder.WriteString(", participantsCount=")
	builder.WriteString(fmt.Sprintf("%v", sr.ParticipantsCount))
	builder.WriteByte(')')
	return builder.String()
}

// StepRuns is a parsable slice of StepRun.
type StepRuns []*StepRun

func (sr StepRuns) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
