// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql"
)

// Participant is the model entity for the Participant schema.
type Participant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// MturkWorkerID holds the value of the "mturkWorkerID" field.
	MturkWorkerID *string `json:"mturkWorkerID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipantQuery when eager-loading is set.
	Edges                         ParticipantEdges `json:"edges"`
	step_run_created_participants *string
}

// ParticipantEdges holds the relations/edges for other nodes in the graph.
type ParticipantEdges struct {
	// Data holds the value of the data edge.
	Data []*Datum
	// ProviderIDs holds the value of the providerIDs edge.
	ProviderIDs []*ProviderID
	// Participations holds the value of the participations edge.
	Participations []*Participation
	// CreatedBy holds the value of the createdBy edge.
	CreatedBy *StepRun
	// Steps holds the value of the steps edge.
	Steps []*StepRun
	// Projects holds the value of the projects edge.
	Projects []*Project
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// DataOrErr returns the Data value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) DataOrErr() ([]*Datum, error) {
	if e.loadedTypes[0] {
		return e.Data, nil
	}
	return nil, &NotLoadedError{edge: "data"}
}

// ProviderIDsOrErr returns the ProviderIDs value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) ProviderIDsOrErr() ([]*ProviderID, error) {
	if e.loadedTypes[1] {
		return e.ProviderIDs, nil
	}
	return nil, &NotLoadedError{edge: "providerIDs"}
}

// ParticipationsOrErr returns the Participations value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) ParticipationsOrErr() ([]*Participation, error) {
	if e.loadedTypes[2] {
		return e.Participations, nil
	}
	return nil, &NotLoadedError{edge: "participations"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipantEdges) CreatedByOrErr() (*StepRun, error) {
	if e.loadedTypes[3] {
		if e.CreatedBy == nil {
			// The edge createdBy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: steprun.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "createdBy"}
}

// StepsOrErr returns the Steps value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) StepsOrErr() ([]*StepRun, error) {
	if e.loadedTypes[4] {
		return e.Steps, nil
	}
	return nil, &NotLoadedError{edge: "steps"}
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[5] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participant) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // mturkWorkerID
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Participant) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // step_run_created_participants
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participant fields.
func (pa *Participant) assignValues(values ...interface{}) error {
	if m, n := len(values), len(participant.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		pa.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		pa.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		pa.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mturkWorkerID", values[2])
	} else if value.Valid {
		pa.MturkWorkerID = new(string)
		*pa.MturkWorkerID = value.String
	}
	values = values[3:]
	if len(values) == len(participant.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field step_run_created_participants", values[0])
		} else if value.Valid {
			pa.step_run_created_participants = new(string)
			*pa.step_run_created_participants = value.String
		}
	}
	return nil
}

// QueryData queries the data edge of the Participant.
func (pa *Participant) QueryData() *DatumQuery {
	return (&ParticipantClient{config: pa.config}).QueryData(pa)
}

// QueryProviderIDs queries the providerIDs edge of the Participant.
func (pa *Participant) QueryProviderIDs() *ProviderIDQuery {
	return (&ParticipantClient{config: pa.config}).QueryProviderIDs(pa)
}

// QueryParticipations queries the participations edge of the Participant.
func (pa *Participant) QueryParticipations() *ParticipationQuery {
	return (&ParticipantClient{config: pa.config}).QueryParticipations(pa)
}

// QueryCreatedBy queries the createdBy edge of the Participant.
func (pa *Participant) QueryCreatedBy() *StepRunQuery {
	return (&ParticipantClient{config: pa.config}).QueryCreatedBy(pa)
}

// QuerySteps queries the steps edge of the Participant.
func (pa *Participant) QuerySteps() *StepRunQuery {
	return (&ParticipantClient{config: pa.config}).QuerySteps(pa)
}

// QueryProjects queries the projects edge of the Participant.
func (pa *Participant) QueryProjects() *ProjectQuery {
	return (&ParticipantClient{config: pa.config}).QueryProjects(pa)
}

// Update returns a builder for updating this Participant.
// Note that, you need to call Participant.Unwrap() before calling this method, if this Participant
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participant) Update() *ParticipantUpdateOne {
	return (&ParticipantClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Participant) Unwrap() *Participant {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participant is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participant) String() string {
	var builder strings.Builder
	builder.WriteString("Participant(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	if v := pa.MturkWorkerID; v != nil {
		builder.WriteString(", mturkWorkerID=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Participants is a parsable slice of Participant.
type Participants []*Participant

func (pa Participants) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
