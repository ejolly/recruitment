// Code generated by entc, DO NOT EDIT.

package participant

import (
	"time"
)

const (
	// Label holds the string label denoting the participant type in the database.
	Label = "participant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMturkWorkerID holds the string denoting the mturkworkerid field in the database.
	FieldMturkWorkerID = "mturk_worker_id"
	// FieldUninitialized holds the string denoting the uninitialized field in the database.
	FieldUninitialized = "uninitialized"

	// EdgeData holds the string denoting the data edge name in mutations.
	EdgeData = "data"
	// EdgeProviderIDs holds the string denoting the providerids edge name in mutations.
	EdgeProviderIDs = "providerIDs"
	// EdgeParticipations holds the string denoting the participations edge name in mutations.
	EdgeParticipations = "participations"
	// EdgeCreatedBy holds the string denoting the createdby edge name in mutations.
	EdgeCreatedBy = "createdBy"
	// EdgeSteps holds the string denoting the steps edge name in mutations.
	EdgeSteps = "steps"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeImportedBy holds the string denoting the importedby edge name in mutations.
	EdgeImportedBy = "importedBy"

	// Table holds the table name of the participant in the database.
	Table = "participants"
	// DataTable is the table the holds the data relation/edge.
	DataTable = "data"
	// DataInverseTable is the table name for the Datum entity.
	// It exists in this package in order to avoid circular dependency with the "datum" package.
	DataInverseTable = "data"
	// DataColumn is the table column denoting the data relation/edge.
	DataColumn = "participant_data"
	// ProviderIDsTable is the table the holds the providerIDs relation/edge.
	ProviderIDsTable = "provider_ids"
	// ProviderIDsInverseTable is the table name for the ProviderID entity.
	// It exists in this package in order to avoid circular dependency with the "providerid" package.
	ProviderIDsInverseTable = "provider_ids"
	// ProviderIDsColumn is the table column denoting the providerIDs relation/edge.
	ProviderIDsColumn = "participant_provider_ids"
	// ParticipationsTable is the table the holds the participations relation/edge.
	ParticipationsTable = "participations"
	// ParticipationsInverseTable is the table name for the Participation entity.
	// It exists in this package in order to avoid circular dependency with the "participation" package.
	ParticipationsInverseTable = "participations"
	// ParticipationsColumn is the table column denoting the participations relation/edge.
	ParticipationsColumn = "participant_participations"
	// CreatedByTable is the table the holds the createdBy relation/edge.
	CreatedByTable = "participants"
	// CreatedByInverseTable is the table name for the StepRun entity.
	// It exists in this package in order to avoid circular dependency with the "steprun" package.
	CreatedByInverseTable = "step_runs"
	// CreatedByColumn is the table column denoting the createdBy relation/edge.
	CreatedByColumn = "step_run_created_participants"
	// StepsTable is the table the holds the steps relation/edge. The primary key declared below.
	StepsTable = "step_run_participants"
	// StepsInverseTable is the table name for the StepRun entity.
	// It exists in this package in order to avoid circular dependency with the "steprun" package.
	StepsInverseTable = "step_runs"
	// ProjectsTable is the table the holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "project_participants"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// ImportedByTable is the table the holds the importedBy relation/edge. The primary key declared below.
	ImportedByTable = "admin_importedParticipants"
	// ImportedByInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	ImportedByInverseTable = "admins"
)

// Columns holds all SQL columns for participant fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMturkWorkerID,
	FieldUninitialized,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Participant type.
var ForeignKeys = []string{
	"step_run_created_participants",
}

var (
	// StepsPrimaryKey and StepsColumn2 are the table columns denoting the
	// primary key for the steps relation (M2M).
	StepsPrimaryKey = []string{"step_run_id", "participant_id"}
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"project_id", "participant_id"}
	// ImportedByPrimaryKey and ImportedByColumn2 are the table columns denoting the
	// primary key for the importedBy relation (M2M).
	ImportedByPrimaryKey = []string{"admin_id", "participant_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
