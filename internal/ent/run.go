// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/run"
	"github.com/facebook/ent/dialect/sql"
)

// Run is the model entity for the Run schema.
type Run struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// StartAt holds the value of the "startAt" field.
	StartAt time.Time `json:"startAt,omitempty"`
	// StartedAt holds the value of the "startedAt" field.
	StartedAt time.Time `json:"startedAt,omitempty"`
	// EndedAt holds the value of the "endedAt" field.
	EndedAt time.Time `json:"endedAt,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Run) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
		&sql.NullTime{},   // startAt
		&sql.NullTime{},   // startedAt
		&sql.NullTime{},   // endedAt
		&sql.NullString{}, // error
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Run fields.
func (r *Run) assignValues(values ...interface{}) error {
	if m, n := len(values), len(run.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		r.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[0])
	} else if value.Valid {
		r.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[1])
	} else if value.Valid {
		r.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field startAt", values[2])
	} else if value.Valid {
		r.StartAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field startedAt", values[3])
	} else if value.Valid {
		r.StartedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endedAt", values[4])
	} else if value.Valid {
		r.EndedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field error", values[5])
	} else if value.Valid {
		r.Error = value.String
	}
	return nil
}

// Update returns a builder for updating this Run.
// Note that, you need to call Run.Unwrap() before calling this method, if this Run
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Run) Update() *RunUpdateOne {
	return (&RunClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Run) Unwrap() *Run {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Run is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Run) String() string {
	var builder strings.Builder
	builder.WriteString("Run(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", startAt=")
	builder.WriteString(r.StartAt.Format(time.ANSIC))
	builder.WriteString(", startedAt=")
	builder.WriteString(r.StartedAt.Format(time.ANSIC))
	builder.WriteString(", endedAt=")
	builder.WriteString(r.EndedAt.Format(time.ANSIC))
	builder.WriteString(", error=")
	builder.WriteString(r.Error)
	builder.WriteByte(')')
	return builder.String()
}

// Runs is a parsable slice of Run.
type Runs []*Run

func (r Runs) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
