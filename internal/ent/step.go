// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/step"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/empiricaly/recruitment/internal/ent/template"
	"github.com/facebook/ent/dialect/sql"
)

// Step is the model entity for the Step schema.
type Step struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Type holds the value of the "type" field.
	Type step.Type `json:"type,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// MsgArgs holds the value of the "msgArgs" field.
	MsgArgs []byte `json:"msgArgs,omitempty"`
	// HitArgs holds the value of the "hitArgs" field.
	HitArgs []byte `json:"hitArgs,omitempty"`
	// FilterArgs holds the value of the "filterArgs" field.
	FilterArgs []byte `json:"filterArgs,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StepQuery when eager-loading is set.
	Edges          StepEdges `json:"edges"`
	step_run_step  *string
	template_steps *string
}

// StepEdges holds the relations/edges for other nodes in the graph.
type StepEdges struct {
	// StepRun holds the value of the stepRun edge.
	StepRun *StepRun
	// Template holds the value of the template edge.
	Template *Template
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StepRunOrErr returns the StepRun value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepEdges) StepRunOrErr() (*StepRun, error) {
	if e.loadedTypes[0] {
		if e.StepRun == nil {
			// The edge stepRun was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: steprun.Label}
		}
		return e.StepRun, nil
	}
	return nil, &NotLoadedError{edge: "stepRun"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepEdges) TemplateOrErr() (*Template, error) {
	if e.loadedTypes[1] {
		if e.Template == nil {
			// The edge template was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: template.Label}
		}
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Step) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
		&sql.NullString{}, // type
		&sql.NullInt64{},  // index
		&sql.NullInt64{},  // duration
		&[]byte{},         // msgArgs
		&[]byte{},         // hitArgs
		&[]byte{},         // filterArgs
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Step) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // step_run_step
		&sql.NullString{}, // template_steps
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Step fields.
func (s *Step) assignValues(values ...interface{}) error {
	if m, n := len(values), len(step.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		s.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[0])
	} else if value.Valid {
		s.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[1])
	} else if value.Valid {
		s.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[2])
	} else if value.Valid {
		s.Type = step.Type(value.String)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field index", values[3])
	} else if value.Valid {
		s.Index = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field duration", values[4])
	} else if value.Valid {
		s.Duration = int(value.Int64)
	}
	if value, ok := values[5].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field msgArgs", values[5])
	} else if value != nil {
		s.MsgArgs = *value
	}
	if value, ok := values[6].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field hitArgs", values[6])
	} else if value != nil {
		s.HitArgs = *value
	}
	if value, ok := values[7].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field filterArgs", values[7])
	} else if value != nil {
		s.FilterArgs = *value
	}
	values = values[8:]
	if len(values) == len(step.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field step_run_step", values[0])
		} else if value.Valid {
			s.step_run_step = new(string)
			*s.step_run_step = value.String
		}
		if value, ok := values[1].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field template_steps", values[1])
		} else if value.Valid {
			s.template_steps = new(string)
			*s.template_steps = value.String
		}
	}
	return nil
}

// QueryStepRun queries the stepRun edge of the Step.
func (s *Step) QueryStepRun() *StepRunQuery {
	return (&StepClient{config: s.config}).QueryStepRun(s)
}

// QueryTemplate queries the template edge of the Step.
func (s *Step) QueryTemplate() *TemplateQuery {
	return (&StepClient{config: s.config}).QueryTemplate(s)
}

// Update returns a builder for updating this Step.
// Note that, you need to call Step.Unwrap() before calling this method, if this Step
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Step) Update() *StepUpdateOne {
	return (&StepClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Step) Unwrap() *Step {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Step is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Step) String() string {
	var builder strings.Builder
	builder.WriteString("Step(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", s.Index))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", s.Duration))
	builder.WriteString(", msgArgs=")
	builder.WriteString(fmt.Sprintf("%v", s.MsgArgs))
	builder.WriteString(", hitArgs=")
	builder.WriteString(fmt.Sprintf("%v", s.HitArgs))
	builder.WriteString(", filterArgs=")
	builder.WriteString(fmt.Sprintf("%v", s.FilterArgs))
	builder.WriteByte(')')
	return builder.String()
}

// Steps is a parsable slice of Step.
type Steps []*Step

func (s Steps) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
