// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// StepRunUpdate is the builder for updating StepRun entities.
type StepRunUpdate struct {
	config
	hooks      []Hook
	mutation   *StepRunMutation
	predicates []predicate.StepRun
}

// Where adds a new predicate for the builder.
func (sru *StepRunUpdate) Where(ps ...predicate.StepRun) *StepRunUpdate {
	sru.predicates = append(sru.predicates, ps...)
	return sru
}

// SetUpdatedAt sets the updatedAt field.
func (sru *StepRunUpdate) SetUpdatedAt(t time.Time) *StepRunUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetStartAt sets the startAt field.
func (sru *StepRunUpdate) SetStartAt(t time.Time) *StepRunUpdate {
	sru.mutation.SetStartAt(t)
	return sru
}

// SetEndedAt sets the endedAt field.
func (sru *StepRunUpdate) SetEndedAt(t time.Time) *StepRunUpdate {
	sru.mutation.SetEndedAt(t)
	return sru
}

// SetParticipantsCount sets the participantsCount field.
func (sru *StepRunUpdate) SetParticipantsCount(i int) *StepRunUpdate {
	sru.mutation.ResetParticipantsCount()
	sru.mutation.SetParticipantsCount(i)
	return sru
}

// AddParticipantsCount adds i to participantsCount.
func (sru *StepRunUpdate) AddParticipantsCount(i int) *StepRunUpdate {
	sru.mutation.AddParticipantsCount(i)
	return sru
}

// Mutation returns the StepRunMutation object of the builder.
func (sru *StepRunUpdate) Mutation() *StepRunMutation {
	return sru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sru *StepRunUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		v := steprun.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
	var (
		err      error
		affected int
	)
	if len(sru.hooks) == 0 {
		affected, err = sru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StepRunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sru.mutation = mutation
			affected, err = sru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sru.hooks) - 1; i >= 0; i-- {
			mut = sru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sru *StepRunUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *StepRunUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *StepRunUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *StepRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   steprun.Table,
			Columns: steprun.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: steprun.FieldID,
			},
		},
	}
	if ps := sru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldUpdatedAt,
		})
	}
	if value, ok := sru.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldStartAt,
		})
	}
	if value, ok := sru.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldEndedAt,
		})
	}
	if value, ok := sru.mutation.ParticipantsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: steprun.FieldParticipantsCount,
		})
	}
	if value, ok := sru.mutation.AddedParticipantsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: steprun.FieldParticipantsCount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{steprun.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StepRunUpdateOne is the builder for updating a single StepRun entity.
type StepRunUpdateOne struct {
	config
	hooks    []Hook
	mutation *StepRunMutation
}

// SetUpdatedAt sets the updatedAt field.
func (sruo *StepRunUpdateOne) SetUpdatedAt(t time.Time) *StepRunUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetStartAt sets the startAt field.
func (sruo *StepRunUpdateOne) SetStartAt(t time.Time) *StepRunUpdateOne {
	sruo.mutation.SetStartAt(t)
	return sruo
}

// SetEndedAt sets the endedAt field.
func (sruo *StepRunUpdateOne) SetEndedAt(t time.Time) *StepRunUpdateOne {
	sruo.mutation.SetEndedAt(t)
	return sruo
}

// SetParticipantsCount sets the participantsCount field.
func (sruo *StepRunUpdateOne) SetParticipantsCount(i int) *StepRunUpdateOne {
	sruo.mutation.ResetParticipantsCount()
	sruo.mutation.SetParticipantsCount(i)
	return sruo
}

// AddParticipantsCount adds i to participantsCount.
func (sruo *StepRunUpdateOne) AddParticipantsCount(i int) *StepRunUpdateOne {
	sruo.mutation.AddParticipantsCount(i)
	return sruo
}

// Mutation returns the StepRunMutation object of the builder.
func (sruo *StepRunUpdateOne) Mutation() *StepRunMutation {
	return sruo.mutation
}

// Save executes the query and returns the updated entity.
func (sruo *StepRunUpdateOne) Save(ctx context.Context) (*StepRun, error) {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		v := steprun.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *StepRun
	)
	if len(sruo.hooks) == 0 {
		node, err = sruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StepRunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sruo.mutation = mutation
			node, err = sruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sruo.hooks) - 1; i >= 0; i-- {
			mut = sruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *StepRunUpdateOne) SaveX(ctx context.Context) *StepRun {
	sr, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return sr
}

// Exec executes the query on the entity.
func (sruo *StepRunUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *StepRunUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *StepRunUpdateOne) sqlSave(ctx context.Context) (sr *StepRun, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   steprun.Table,
			Columns: steprun.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: steprun.FieldID,
			},
		},
	}
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing StepRun.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldUpdatedAt,
		})
	}
	if value, ok := sruo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldStartAt,
		})
	}
	if value, ok := sruo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldEndedAt,
		})
	}
	if value, ok := sruo.mutation.ParticipantsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: steprun.FieldParticipantsCount,
		})
	}
	if value, ok := sruo.mutation.AddedParticipantsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: steprun.FieldParticipantsCount,
		})
	}
	sr = &StepRun{config: sruo.config}
	_spec.Assign = sr.assignValues
	_spec.ScanValues = sr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{steprun.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sr, nil
}
