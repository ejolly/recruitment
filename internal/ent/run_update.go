// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/empiricaly/recruitment/internal/ent/project"
	"github.com/empiricaly/recruitment/internal/ent/run"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/empiricaly/recruitment/internal/ent/template"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RunUpdate is the builder for updating Run entities.
type RunUpdate struct {
	config
	hooks      []Hook
	mutation   *RunMutation
	predicates []predicate.Run
}

// Where adds a new predicate for the builder.
func (ru *RunUpdate) Where(ps ...predicate.Run) *RunUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetUpdatedAt sets the updated_at field.
func (ru *RunUpdate) SetUpdatedAt(t time.Time) *RunUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetStatus sets the status field.
func (ru *RunUpdate) SetStatus(r run.Status) *RunUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetStartedAt sets the startedAt field.
func (ru *RunUpdate) SetStartedAt(t time.Time) *RunUpdate {
	ru.mutation.SetStartedAt(t)
	return ru
}

// SetNillableStartedAt sets the startedAt field if the given value is not nil.
func (ru *RunUpdate) SetNillableStartedAt(t *time.Time) *RunUpdate {
	if t != nil {
		ru.SetStartedAt(*t)
	}
	return ru
}

// ClearStartedAt clears the value of startedAt.
func (ru *RunUpdate) ClearStartedAt() *RunUpdate {
	ru.mutation.ClearStartedAt()
	return ru
}

// SetEndedAt sets the endedAt field.
func (ru *RunUpdate) SetEndedAt(t time.Time) *RunUpdate {
	ru.mutation.SetEndedAt(t)
	return ru
}

// SetNillableEndedAt sets the endedAt field if the given value is not nil.
func (ru *RunUpdate) SetNillableEndedAt(t *time.Time) *RunUpdate {
	if t != nil {
		ru.SetEndedAt(*t)
	}
	return ru
}

// ClearEndedAt clears the value of endedAt.
func (ru *RunUpdate) ClearEndedAt() *RunUpdate {
	ru.mutation.ClearEndedAt()
	return ru
}

// SetName sets the name field.
func (ru *RunUpdate) SetName(s string) *RunUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetStartAt sets the startAt field.
func (ru *RunUpdate) SetStartAt(t time.Time) *RunUpdate {
	ru.mutation.SetStartAt(t)
	return ru
}

// SetNillableStartAt sets the startAt field if the given value is not nil.
func (ru *RunUpdate) SetNillableStartAt(t *time.Time) *RunUpdate {
	if t != nil {
		ru.SetStartAt(*t)
	}
	return ru
}

// ClearStartAt clears the value of startAt.
func (ru *RunUpdate) ClearStartAt() *RunUpdate {
	ru.mutation.ClearStartAt()
	return ru
}

// SetError sets the error field.
func (ru *RunUpdate) SetError(s string) *RunUpdate {
	ru.mutation.SetError(s)
	return ru
}

// SetNillableError sets the error field if the given value is not nil.
func (ru *RunUpdate) SetNillableError(s *string) *RunUpdate {
	if s != nil {
		ru.SetError(*s)
	}
	return ru
}

// ClearError clears the value of error.
func (ru *RunUpdate) ClearError() *RunUpdate {
	ru.mutation.ClearError()
	return ru
}

// SetProjectID sets the project edge to Project by id.
func (ru *RunUpdate) SetProjectID(id string) *RunUpdate {
	ru.mutation.SetProjectID(id)
	return ru
}

// SetNillableProjectID sets the project edge to Project by id if the given value is not nil.
func (ru *RunUpdate) SetNillableProjectID(id *string) *RunUpdate {
	if id != nil {
		ru = ru.SetProjectID(*id)
	}
	return ru
}

// SetProject sets the project edge to Project.
func (ru *RunUpdate) SetProject(p *Project) *RunUpdate {
	return ru.SetProjectID(p.ID)
}

// SetTemplateID sets the template edge to Template by id.
func (ru *RunUpdate) SetTemplateID(id string) *RunUpdate {
	ru.mutation.SetTemplateID(id)
	return ru
}

// SetTemplate sets the template edge to Template.
func (ru *RunUpdate) SetTemplate(t *Template) *RunUpdate {
	return ru.SetTemplateID(t.ID)
}

// SetCurrentStepID sets the currentStep edge to StepRun by id.
func (ru *RunUpdate) SetCurrentStepID(id string) *RunUpdate {
	ru.mutation.SetCurrentStepID(id)
	return ru
}

// SetNillableCurrentStepID sets the currentStep edge to StepRun by id if the given value is not nil.
func (ru *RunUpdate) SetNillableCurrentStepID(id *string) *RunUpdate {
	if id != nil {
		ru = ru.SetCurrentStepID(*id)
	}
	return ru
}

// SetCurrentStep sets the currentStep edge to StepRun.
func (ru *RunUpdate) SetCurrentStep(s *StepRun) *RunUpdate {
	return ru.SetCurrentStepID(s.ID)
}

// AddStepIDs adds the steps edge to StepRun by ids.
func (ru *RunUpdate) AddStepIDs(ids ...string) *RunUpdate {
	ru.mutation.AddStepIDs(ids...)
	return ru
}

// AddSteps adds the steps edges to StepRun.
func (ru *RunUpdate) AddSteps(s ...*StepRun) *RunUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddStepIDs(ids...)
}

// Mutation returns the RunMutation object of the builder.
func (ru *RunUpdate) Mutation() *RunMutation {
	return ru.mutation
}

// ClearProject clears the "project" edge to type Project.
func (ru *RunUpdate) ClearProject() *RunUpdate {
	ru.mutation.ClearProject()
	return ru
}

// ClearTemplate clears the "template" edge to type Template.
func (ru *RunUpdate) ClearTemplate() *RunUpdate {
	ru.mutation.ClearTemplate()
	return ru
}

// ClearCurrentStep clears the "currentStep" edge to type StepRun.
func (ru *RunUpdate) ClearCurrentStep() *RunUpdate {
	ru.mutation.ClearCurrentStep()
	return ru
}

// ClearSteps clears all "steps" edges to type StepRun.
func (ru *RunUpdate) ClearSteps() *RunUpdate {
	ru.mutation.ClearSteps()
	return ru
}

// RemoveStepIDs removes the steps edge to StepRun by ids.
func (ru *RunUpdate) RemoveStepIDs(ids ...string) *RunUpdate {
	ru.mutation.RemoveStepIDs(ids...)
	return ru
}

// RemoveSteps removes steps edges to StepRun.
func (ru *RunUpdate) RemoveSteps(s ...*StepRun) *RunUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveStepIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RunUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RunUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := run.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RunUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := run.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := ru.mutation.TemplateID(); ru.mutation.TemplateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"template\"")
	}
	return nil
}

func (ru *RunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   run.Table,
			Columns: run.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: run.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: run.FieldStatus,
		})
	}
	if value, ok := ru.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartedAt,
		})
	}
	if ru.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldStartedAt,
		})
	}
	if value, ok := ru.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldEndedAt,
		})
	}
	if ru.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldEndedAt,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldName,
		})
	}
	if value, ok := ru.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartAt,
		})
	}
	if ru.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldStartAt,
		})
	}
	if value, ok := ru.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldError,
		})
	}
	if ru.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: run.FieldError,
		})
	}
	if ru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   run.ProjectTable,
			Columns: []string{run.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   run.ProjectTable,
			Columns: []string{run.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   run.TemplateTable,
			Columns: []string{run.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: template.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   run.TemplateTable,
			Columns: []string{run.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CurrentStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   run.CurrentStepTable,
			Columns: []string{run.CurrentStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CurrentStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   run.CurrentStepTable,
			Columns: []string{run.CurrentStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.StepsTable,
			Columns: []string{run.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedStepsIDs(); len(nodes) > 0 && !ru.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.StepsTable,
			Columns: []string{run.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.StepsTable,
			Columns: []string{run.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RunUpdateOne is the builder for updating a single Run entity.
type RunUpdateOne struct {
	config
	hooks    []Hook
	mutation *RunMutation
}

// SetUpdatedAt sets the updated_at field.
func (ruo *RunUpdateOne) SetUpdatedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetStatus sets the status field.
func (ruo *RunUpdateOne) SetStatus(r run.Status) *RunUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetStartedAt sets the startedAt field.
func (ruo *RunUpdateOne) SetStartedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetStartedAt(t)
	return ruo
}

// SetNillableStartedAt sets the startedAt field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableStartedAt(t *time.Time) *RunUpdateOne {
	if t != nil {
		ruo.SetStartedAt(*t)
	}
	return ruo
}

// ClearStartedAt clears the value of startedAt.
func (ruo *RunUpdateOne) ClearStartedAt() *RunUpdateOne {
	ruo.mutation.ClearStartedAt()
	return ruo
}

// SetEndedAt sets the endedAt field.
func (ruo *RunUpdateOne) SetEndedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetEndedAt(t)
	return ruo
}

// SetNillableEndedAt sets the endedAt field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableEndedAt(t *time.Time) *RunUpdateOne {
	if t != nil {
		ruo.SetEndedAt(*t)
	}
	return ruo
}

// ClearEndedAt clears the value of endedAt.
func (ruo *RunUpdateOne) ClearEndedAt() *RunUpdateOne {
	ruo.mutation.ClearEndedAt()
	return ruo
}

// SetName sets the name field.
func (ruo *RunUpdateOne) SetName(s string) *RunUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetStartAt sets the startAt field.
func (ruo *RunUpdateOne) SetStartAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetStartAt(t)
	return ruo
}

// SetNillableStartAt sets the startAt field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableStartAt(t *time.Time) *RunUpdateOne {
	if t != nil {
		ruo.SetStartAt(*t)
	}
	return ruo
}

// ClearStartAt clears the value of startAt.
func (ruo *RunUpdateOne) ClearStartAt() *RunUpdateOne {
	ruo.mutation.ClearStartAt()
	return ruo
}

// SetError sets the error field.
func (ruo *RunUpdateOne) SetError(s string) *RunUpdateOne {
	ruo.mutation.SetError(s)
	return ruo
}

// SetNillableError sets the error field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableError(s *string) *RunUpdateOne {
	if s != nil {
		ruo.SetError(*s)
	}
	return ruo
}

// ClearError clears the value of error.
func (ruo *RunUpdateOne) ClearError() *RunUpdateOne {
	ruo.mutation.ClearError()
	return ruo
}

// SetProjectID sets the project edge to Project by id.
func (ruo *RunUpdateOne) SetProjectID(id string) *RunUpdateOne {
	ruo.mutation.SetProjectID(id)
	return ruo
}

// SetNillableProjectID sets the project edge to Project by id if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableProjectID(id *string) *RunUpdateOne {
	if id != nil {
		ruo = ruo.SetProjectID(*id)
	}
	return ruo
}

// SetProject sets the project edge to Project.
func (ruo *RunUpdateOne) SetProject(p *Project) *RunUpdateOne {
	return ruo.SetProjectID(p.ID)
}

// SetTemplateID sets the template edge to Template by id.
func (ruo *RunUpdateOne) SetTemplateID(id string) *RunUpdateOne {
	ruo.mutation.SetTemplateID(id)
	return ruo
}

// SetTemplate sets the template edge to Template.
func (ruo *RunUpdateOne) SetTemplate(t *Template) *RunUpdateOne {
	return ruo.SetTemplateID(t.ID)
}

// SetCurrentStepID sets the currentStep edge to StepRun by id.
func (ruo *RunUpdateOne) SetCurrentStepID(id string) *RunUpdateOne {
	ruo.mutation.SetCurrentStepID(id)
	return ruo
}

// SetNillableCurrentStepID sets the currentStep edge to StepRun by id if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableCurrentStepID(id *string) *RunUpdateOne {
	if id != nil {
		ruo = ruo.SetCurrentStepID(*id)
	}
	return ruo
}

// SetCurrentStep sets the currentStep edge to StepRun.
func (ruo *RunUpdateOne) SetCurrentStep(s *StepRun) *RunUpdateOne {
	return ruo.SetCurrentStepID(s.ID)
}

// AddStepIDs adds the steps edge to StepRun by ids.
func (ruo *RunUpdateOne) AddStepIDs(ids ...string) *RunUpdateOne {
	ruo.mutation.AddStepIDs(ids...)
	return ruo
}

// AddSteps adds the steps edges to StepRun.
func (ruo *RunUpdateOne) AddSteps(s ...*StepRun) *RunUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddStepIDs(ids...)
}

// Mutation returns the RunMutation object of the builder.
func (ruo *RunUpdateOne) Mutation() *RunMutation {
	return ruo.mutation
}

// ClearProject clears the "project" edge to type Project.
func (ruo *RunUpdateOne) ClearProject() *RunUpdateOne {
	ruo.mutation.ClearProject()
	return ruo
}

// ClearTemplate clears the "template" edge to type Template.
func (ruo *RunUpdateOne) ClearTemplate() *RunUpdateOne {
	ruo.mutation.ClearTemplate()
	return ruo
}

// ClearCurrentStep clears the "currentStep" edge to type StepRun.
func (ruo *RunUpdateOne) ClearCurrentStep() *RunUpdateOne {
	ruo.mutation.ClearCurrentStep()
	return ruo
}

// ClearSteps clears all "steps" edges to type StepRun.
func (ruo *RunUpdateOne) ClearSteps() *RunUpdateOne {
	ruo.mutation.ClearSteps()
	return ruo
}

// RemoveStepIDs removes the steps edge to StepRun by ids.
func (ruo *RunUpdateOne) RemoveStepIDs(ids ...string) *RunUpdateOne {
	ruo.mutation.RemoveStepIDs(ids...)
	return ruo
}

// RemoveSteps removes steps edges to StepRun.
func (ruo *RunUpdateOne) RemoveSteps(s ...*StepRun) *RunUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveStepIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RunUpdateOne) Save(ctx context.Context) (*Run, error) {
	var (
		err  error
		node *Run
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunUpdateOne) SaveX(ctx context.Context) *Run {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RunUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RunUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := run.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RunUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := run.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := ruo.mutation.TemplateID(); ruo.mutation.TemplateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"template\"")
	}
	return nil
}

func (ruo *RunUpdateOne) sqlSave(ctx context.Context) (_node *Run, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   run.Table,
			Columns: run.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: run.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Run.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: run.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartedAt,
		})
	}
	if ruo.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldStartedAt,
		})
	}
	if value, ok := ruo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldEndedAt,
		})
	}
	if ruo.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldEndedAt,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldName,
		})
	}
	if value, ok := ruo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStartAt,
		})
	}
	if ruo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldStartAt,
		})
	}
	if value, ok := ruo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldError,
		})
	}
	if ruo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: run.FieldError,
		})
	}
	if ruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   run.ProjectTable,
			Columns: []string{run.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   run.ProjectTable,
			Columns: []string{run.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   run.TemplateTable,
			Columns: []string{run.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: template.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   run.TemplateTable,
			Columns: []string{run.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CurrentStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   run.CurrentStepTable,
			Columns: []string{run.CurrentStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CurrentStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   run.CurrentStepTable,
			Columns: []string{run.CurrentStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.StepsTable,
			Columns: []string{run.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedStepsIDs(); len(nodes) > 0 && !ruo.mutation.StepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.StepsTable,
			Columns: []string{run.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.StepsTable,
			Columns: []string{run.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Run{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
