// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/providerid"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ProviderIDCreate is the builder for creating a ProviderID entity.
type ProviderIDCreate struct {
	config
	mutation *ProviderIDMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (pic *ProviderIDCreate) SetCreatedAt(t time.Time) *ProviderIDCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pic *ProviderIDCreate) SetNillableCreatedAt(t *time.Time) *ProviderIDCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the updated_at field.
func (pic *ProviderIDCreate) SetUpdatedAt(t time.Time) *ProviderIDCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pic *ProviderIDCreate) SetNillableUpdatedAt(t *time.Time) *ProviderIDCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetMturkWorkerID sets the mturkWorkerID field.
func (pic *ProviderIDCreate) SetMturkWorkerID(s string) *ProviderIDCreate {
	pic.mutation.SetMturkWorkerID(s)
	return pic
}

// SetID sets the id field.
func (pic *ProviderIDCreate) SetID(s string) *ProviderIDCreate {
	pic.mutation.SetID(s)
	return pic
}

// SetParticpantID sets the particpant edge to Participant by id.
func (pic *ProviderIDCreate) SetParticpantID(id string) *ProviderIDCreate {
	pic.mutation.SetParticpantID(id)
	return pic
}

// SetNillableParticpantID sets the particpant edge to Participant by id if the given value is not nil.
func (pic *ProviderIDCreate) SetNillableParticpantID(id *string) *ProviderIDCreate {
	if id != nil {
		pic = pic.SetParticpantID(*id)
	}
	return pic
}

// SetParticpant sets the particpant edge to Participant.
func (pic *ProviderIDCreate) SetParticpant(p *Participant) *ProviderIDCreate {
	return pic.SetParticpantID(p.ID)
}

// Mutation returns the ProviderIDMutation object of the builder.
func (pic *ProviderIDCreate) Mutation() *ProviderIDMutation {
	return pic.mutation
}

// Save creates the ProviderID in the database.
func (pic *ProviderIDCreate) Save(ctx context.Context) (*ProviderID, error) {
	var (
		err  error
		node *ProviderID
	)
	pic.defaults()
	if len(pic.hooks) == 0 {
		if err = pic.check(); err != nil {
			return nil, err
		}
		node, err = pic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProviderIDMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pic.check(); err != nil {
				return nil, err
			}
			pic.mutation = mutation
			node, err = pic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pic.hooks) - 1; i >= 0; i-- {
			mut = pic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProviderIDCreate) SaveX(ctx context.Context) *ProviderID {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pic *ProviderIDCreate) defaults() {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := providerid.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := providerid.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProviderIDCreate) check() error {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := pic.mutation.MturkWorkerID(); !ok {
		return &ValidationError{Name: "mturkWorkerID", err: errors.New("ent: missing required field \"mturkWorkerID\"")}
	}
	if v, ok := pic.mutation.ID(); ok {
		if err := providerid.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (pic *ProviderIDCreate) sqlSave(ctx context.Context) (*ProviderID, error) {
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (pic *ProviderIDCreate) createSpec() (*ProviderID, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderID{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: providerid.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: providerid.FieldID,
			},
		}
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: providerid.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: providerid.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.MturkWorkerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: providerid.FieldMturkWorkerID,
		})
		_node.MturkWorkerID = value
	}
	if nodes := pic.mutation.ParticpantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerid.ParticpantTable,
			Columns: []string{providerid.ParticpantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProviderIDCreateBulk is the builder for creating a bulk of ProviderID entities.
type ProviderIDCreateBulk struct {
	config
	builders []*ProviderIDCreate
}

// Save creates the ProviderID entities in the database.
func (picb *ProviderIDCreateBulk) Save(ctx context.Context) ([]*ProviderID, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProviderID, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderIDMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (picb *ProviderIDCreateBulk) SaveX(ctx context.Context) []*ProviderID {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
