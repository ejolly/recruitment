// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/step"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/empiricaly/recruitment/internal/ent/template"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// StepCreate is the builder for creating a Step entity.
type StepCreate struct {
	config
	mutation *StepMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (sc *StepCreate) SetCreatedAt(t time.Time) *StepCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (sc *StepCreate) SetNillableCreatedAt(t *time.Time) *StepCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the updated_at field.
func (sc *StepCreate) SetUpdatedAt(t time.Time) *StepCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (sc *StepCreate) SetNillableUpdatedAt(t *time.Time) *StepCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetType sets the type field.
func (sc *StepCreate) SetType(s step.Type) *StepCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetIndex sets the index field.
func (sc *StepCreate) SetIndex(i int) *StepCreate {
	sc.mutation.SetIndex(i)
	return sc
}

// SetDuration sets the duration field.
func (sc *StepCreate) SetDuration(i int) *StepCreate {
	sc.mutation.SetDuration(i)
	return sc
}

// SetMsgArgs sets the msgArgs field.
func (sc *StepCreate) SetMsgArgs(b []byte) *StepCreate {
	sc.mutation.SetMsgArgs(b)
	return sc
}

// SetHitArgs sets the hitArgs field.
func (sc *StepCreate) SetHitArgs(b []byte) *StepCreate {
	sc.mutation.SetHitArgs(b)
	return sc
}

// SetFilterArgs sets the filterArgs field.
func (sc *StepCreate) SetFilterArgs(b []byte) *StepCreate {
	sc.mutation.SetFilterArgs(b)
	return sc
}

// SetID sets the id field.
func (sc *StepCreate) SetID(s string) *StepCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetStepRunID sets the stepRun edge to StepRun by id.
func (sc *StepCreate) SetStepRunID(id string) *StepCreate {
	sc.mutation.SetStepRunID(id)
	return sc
}

// SetNillableStepRunID sets the stepRun edge to StepRun by id if the given value is not nil.
func (sc *StepCreate) SetNillableStepRunID(id *string) *StepCreate {
	if id != nil {
		sc = sc.SetStepRunID(*id)
	}
	return sc
}

// SetStepRun sets the stepRun edge to StepRun.
func (sc *StepCreate) SetStepRun(s *StepRun) *StepCreate {
	return sc.SetStepRunID(s.ID)
}

// SetTemplateID sets the template edge to Template by id.
func (sc *StepCreate) SetTemplateID(id string) *StepCreate {
	sc.mutation.SetTemplateID(id)
	return sc
}

// SetNillableTemplateID sets the template edge to Template by id if the given value is not nil.
func (sc *StepCreate) SetNillableTemplateID(id *string) *StepCreate {
	if id != nil {
		sc = sc.SetTemplateID(*id)
	}
	return sc
}

// SetTemplate sets the template edge to Template.
func (sc *StepCreate) SetTemplate(t *Template) *StepCreate {
	return sc.SetTemplateID(t.ID)
}

// Mutation returns the StepMutation object of the builder.
func (sc *StepCreate) Mutation() *StepMutation {
	return sc.mutation
}

// Save creates the Step in the database.
func (sc *StepCreate) Save(ctx context.Context) (*Step, error) {
	if err := sc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Step
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StepCreate) SaveX(ctx context.Context) *Step {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *StepCreate) preSave() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := step.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := step.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := step.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New("ent: missing required field \"index\"")}
	}
	if _, ok := sc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New("ent: missing required field \"duration\"")}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := step.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (sc *StepCreate) sqlSave(ctx context.Context) (*Step, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}

func (sc *StepCreate) createSpec() (*Step, *sqlgraph.CreateSpec) {
	var (
		s     = &Step{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: step.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: step.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		s.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: step.FieldCreatedAt,
		})
		s.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: step.FieldUpdatedAt,
		})
		s.UpdatedAt = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: step.FieldType,
		})
		s.Type = value
	}
	if value, ok := sc.mutation.Index(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: step.FieldIndex,
		})
		s.Index = value
	}
	if value, ok := sc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: step.FieldDuration,
		})
		s.Duration = value
	}
	if value, ok := sc.mutation.MsgArgs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: step.FieldMsgArgs,
		})
		s.MsgArgs = value
	}
	if value, ok := sc.mutation.HitArgs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: step.FieldHitArgs,
		})
		s.HitArgs = value
	}
	if value, ok := sc.mutation.FilterArgs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: step.FieldFilterArgs,
		})
		s.FilterArgs = value
	}
	if nodes := sc.mutation.StepRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   step.StepRunTable,
			Columns: []string{step.StepRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   step.TemplateTable,
			Columns: []string{step.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: template.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}

// StepCreateBulk is the builder for creating a bulk of Step entities.
type StepCreateBulk struct {
	config
	builders []*StepCreate
}

// Save creates the Step entities in the database.
func (scb *StepCreateBulk) Save(ctx context.Context) ([]*Step, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Step, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*StepMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *StepCreateBulk) SaveX(ctx context.Context) []*Step {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
