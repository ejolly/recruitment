// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/empiricaly/recruitment/internal/ent/migrate"

	"github.com/empiricaly/recruitment/internal/ent/admin"
	"github.com/empiricaly/recruitment/internal/ent/datum"
	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/participation"
	"github.com/empiricaly/recruitment/internal/ent/project"
	"github.com/empiricaly/recruitment/internal/ent/providerid"
	"github.com/empiricaly/recruitment/internal/ent/run"
	"github.com/empiricaly/recruitment/internal/ent/step"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/empiricaly/recruitment/internal/ent/template"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// Datum is the client for interacting with the Datum builders.
	Datum *DatumClient
	// Participant is the client for interacting with the Participant builders.
	Participant *ParticipantClient
	// Participation is the client for interacting with the Participation builders.
	Participation *ParticipationClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProviderID is the client for interacting with the ProviderID builders.
	ProviderID *ProviderIDClient
	// Run is the client for interacting with the Run builders.
	Run *RunClient
	// Step is the client for interacting with the Step builders.
	Step *StepClient
	// StepRun is the client for interacting with the StepRun builders.
	StepRun *StepRunClient
	// Template is the client for interacting with the Template builders.
	Template *TemplateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Admin = NewAdminClient(c.config)
	c.Datum = NewDatumClient(c.config)
	c.Participant = NewParticipantClient(c.config)
	c.Participation = NewParticipationClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProviderID = NewProviderIDClient(c.config)
	c.Run = NewRunClient(c.config)
	c.Step = NewStepClient(c.config)
	c.StepRun = NewStepRunClient(c.config)
	c.Template = NewTemplateClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Admin:         NewAdminClient(cfg),
		Datum:         NewDatumClient(cfg),
		Participant:   NewParticipantClient(cfg),
		Participation: NewParticipationClient(cfg),
		Project:       NewProjectClient(cfg),
		ProviderID:    NewProviderIDClient(cfg),
		Run:           NewRunClient(cfg),
		Step:          NewStepClient(cfg),
		StepRun:       NewStepRunClient(cfg),
		Template:      NewTemplateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Admin:         NewAdminClient(cfg),
		Datum:         NewDatumClient(cfg),
		Participant:   NewParticipantClient(cfg),
		Participation: NewParticipationClient(cfg),
		Project:       NewProjectClient(cfg),
		ProviderID:    NewProviderIDClient(cfg),
		Run:           NewRunClient(cfg),
		Step:          NewStepClient(cfg),
		StepRun:       NewStepRunClient(cfg),
		Template:      NewTemplateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Admin.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Admin.Use(hooks...)
	c.Datum.Use(hooks...)
	c.Participant.Use(hooks...)
	c.Participation.Use(hooks...)
	c.Project.Use(hooks...)
	c.ProviderID.Use(hooks...)
	c.Run.Use(hooks...)
	c.Step.Use(hooks...)
	c.StepRun.Use(hooks...)
	c.Template.Use(hooks...)
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Create returns a create builder for Admin.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id string) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminClient) DeleteOneID(id string) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{config: c.config}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id string) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id string) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjects queries the projects edge of a Admin.
func (c *AdminClient) QueryProjects(a *Admin) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.ProjectsTable, admin.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplates queries the templates edge of a Admin.
func (c *AdminClient) QueryTemplates(a *Admin) *TemplateQuery {
	query := &TemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.TemplatesTable, admin.TemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// DatumClient is a client for the Datum schema.
type DatumClient struct {
	config
}

// NewDatumClient returns a client for the Datum from the given config.
func NewDatumClient(c config) *DatumClient {
	return &DatumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `datum.Hooks(f(g(h())))`.
func (c *DatumClient) Use(hooks ...Hook) {
	c.hooks.Datum = append(c.hooks.Datum, hooks...)
}

// Create returns a create builder for Datum.
func (c *DatumClient) Create() *DatumCreate {
	mutation := newDatumMutation(c.config, OpCreate)
	return &DatumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Datum entities.
func (c *DatumClient) CreateBulk(builders ...*DatumCreate) *DatumCreateBulk {
	return &DatumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Datum.
func (c *DatumClient) Update() *DatumUpdate {
	mutation := newDatumMutation(c.config, OpUpdate)
	return &DatumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DatumClient) UpdateOne(d *Datum) *DatumUpdateOne {
	mutation := newDatumMutation(c.config, OpUpdateOne, withDatum(d))
	return &DatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DatumClient) UpdateOneID(id string) *DatumUpdateOne {
	mutation := newDatumMutation(c.config, OpUpdateOne, withDatumID(id))
	return &DatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Datum.
func (c *DatumClient) Delete() *DatumDelete {
	mutation := newDatumMutation(c.config, OpDelete)
	return &DatumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DatumClient) DeleteOne(d *Datum) *DatumDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DatumClient) DeleteOneID(id string) *DatumDeleteOne {
	builder := c.Delete().Where(datum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DatumDeleteOne{builder}
}

// Query returns a query builder for Datum.
func (c *DatumClient) Query() *DatumQuery {
	return &DatumQuery{config: c.config}
}

// Get returns a Datum entity by its id.
func (c *DatumClient) Get(ctx context.Context, id string) (*Datum, error) {
	return c.Query().Where(datum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DatumClient) GetX(ctx context.Context, id string) *Datum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParticipant queries the participant edge of a Datum.
func (c *DatumClient) QueryParticipant(d *Datum) *ParticipantQuery {
	query := &ParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(datum.Table, datum.FieldID, id),
			sqlgraph.To(participant.Table, participant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, datum.ParticipantTable, datum.ParticipantColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DatumClient) Hooks() []Hook {
	return c.hooks.Datum
}

// ParticipantClient is a client for the Participant schema.
type ParticipantClient struct {
	config
}

// NewParticipantClient returns a client for the Participant from the given config.
func NewParticipantClient(c config) *ParticipantClient {
	return &ParticipantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `participant.Hooks(f(g(h())))`.
func (c *ParticipantClient) Use(hooks ...Hook) {
	c.hooks.Participant = append(c.hooks.Participant, hooks...)
}

// Create returns a create builder for Participant.
func (c *ParticipantClient) Create() *ParticipantCreate {
	mutation := newParticipantMutation(c.config, OpCreate)
	return &ParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Participant entities.
func (c *ParticipantClient) CreateBulk(builders ...*ParticipantCreate) *ParticipantCreateBulk {
	return &ParticipantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Participant.
func (c *ParticipantClient) Update() *ParticipantUpdate {
	mutation := newParticipantMutation(c.config, OpUpdate)
	return &ParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParticipantClient) UpdateOne(pa *Participant) *ParticipantUpdateOne {
	mutation := newParticipantMutation(c.config, OpUpdateOne, withParticipant(pa))
	return &ParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParticipantClient) UpdateOneID(id string) *ParticipantUpdateOne {
	mutation := newParticipantMutation(c.config, OpUpdateOne, withParticipantID(id))
	return &ParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Participant.
func (c *ParticipantClient) Delete() *ParticipantDelete {
	mutation := newParticipantMutation(c.config, OpDelete)
	return &ParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ParticipantClient) DeleteOne(pa *Participant) *ParticipantDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ParticipantClient) DeleteOneID(id string) *ParticipantDeleteOne {
	builder := c.Delete().Where(participant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParticipantDeleteOne{builder}
}

// Query returns a query builder for Participant.
func (c *ParticipantClient) Query() *ParticipantQuery {
	return &ParticipantQuery{config: c.config}
}

// Get returns a Participant entity by its id.
func (c *ParticipantClient) Get(ctx context.Context, id string) (*Participant, error) {
	return c.Query().Where(participant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParticipantClient) GetX(ctx context.Context, id string) *Participant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryData queries the data edge of a Participant.
func (c *ParticipantClient) QueryData(pa *Participant) *DatumQuery {
	query := &DatumQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participant.Table, participant.FieldID, id),
			sqlgraph.To(datum.Table, datum.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, participant.DataTable, participant.DataColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProviderIDs queries the providerIDs edge of a Participant.
func (c *ParticipantClient) QueryProviderIDs(pa *Participant) *ProviderIDQuery {
	query := &ProviderIDQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participant.Table, participant.FieldID, id),
			sqlgraph.To(providerid.Table, providerid.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, participant.ProviderIDsTable, participant.ProviderIDsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipations queries the participations edge of a Participant.
func (c *ParticipantClient) QueryParticipations(pa *Participant) *ParticipationQuery {
	query := &ParticipationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participant.Table, participant.FieldID, id),
			sqlgraph.To(participation.Table, participation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, participant.ParticipationsTable, participant.ParticipationsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedBy queries the createdBy edge of a Participant.
func (c *ParticipantClient) QueryCreatedBy(pa *Participant) *StepRunQuery {
	query := &StepRunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participant.Table, participant.FieldID, id),
			sqlgraph.To(steprun.Table, steprun.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, participant.CreatedByTable, participant.CreatedByColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySteps queries the steps edge of a Participant.
func (c *ParticipantClient) QuerySteps(pa *Participant) *StepRunQuery {
	query := &StepRunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participant.Table, participant.FieldID, id),
			sqlgraph.To(steprun.Table, steprun.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, participant.StepsTable, participant.StepsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Participant.
func (c *ParticipantClient) QueryProjects(pa *Participant) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participant.Table, participant.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, participant.ProjectsTable, participant.ProjectsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParticipantClient) Hooks() []Hook {
	return c.hooks.Participant
}

// ParticipationClient is a client for the Participation schema.
type ParticipationClient struct {
	config
}

// NewParticipationClient returns a client for the Participation from the given config.
func NewParticipationClient(c config) *ParticipationClient {
	return &ParticipationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `participation.Hooks(f(g(h())))`.
func (c *ParticipationClient) Use(hooks ...Hook) {
	c.hooks.Participation = append(c.hooks.Participation, hooks...)
}

// Create returns a create builder for Participation.
func (c *ParticipationClient) Create() *ParticipationCreate {
	mutation := newParticipationMutation(c.config, OpCreate)
	return &ParticipationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Participation entities.
func (c *ParticipationClient) CreateBulk(builders ...*ParticipationCreate) *ParticipationCreateBulk {
	return &ParticipationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Participation.
func (c *ParticipationClient) Update() *ParticipationUpdate {
	mutation := newParticipationMutation(c.config, OpUpdate)
	return &ParticipationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParticipationClient) UpdateOne(pa *Participation) *ParticipationUpdateOne {
	mutation := newParticipationMutation(c.config, OpUpdateOne, withParticipation(pa))
	return &ParticipationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParticipationClient) UpdateOneID(id string) *ParticipationUpdateOne {
	mutation := newParticipationMutation(c.config, OpUpdateOne, withParticipationID(id))
	return &ParticipationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Participation.
func (c *ParticipationClient) Delete() *ParticipationDelete {
	mutation := newParticipationMutation(c.config, OpDelete)
	return &ParticipationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ParticipationClient) DeleteOne(pa *Participation) *ParticipationDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ParticipationClient) DeleteOneID(id string) *ParticipationDeleteOne {
	builder := c.Delete().Where(participation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParticipationDeleteOne{builder}
}

// Query returns a query builder for Participation.
func (c *ParticipationClient) Query() *ParticipationQuery {
	return &ParticipationQuery{config: c.config}
}

// Get returns a Participation entity by its id.
func (c *ParticipationClient) Get(ctx context.Context, id string) (*Participation, error) {
	return c.Query().Where(participation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParticipationClient) GetX(ctx context.Context, id string) *Participation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStepRun queries the stepRun edge of a Participation.
func (c *ParticipationClient) QueryStepRun(pa *Participation) *StepRunQuery {
	query := &StepRunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participation.Table, participation.FieldID, id),
			sqlgraph.To(steprun.Table, steprun.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, participation.StepRunTable, participation.StepRunColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipant queries the participant edge of a Participation.
func (c *ParticipationClient) QueryParticipant(pa *Participation) *ParticipantQuery {
	query := &ParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(participation.Table, participation.FieldID, id),
			sqlgraph.To(participant.Table, participant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, participation.ParticipantTable, participation.ParticipantColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParticipationClient) Hooks() []Hook {
	return c.hooks.Participation
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id string) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id string) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{config: c.config}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id string) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id string) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRuns queries the runs edge of a Project.
func (c *ProjectClient) QueryRuns(pr *Project) *RunQuery {
	query := &RunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(run.Table, run.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.RunsTable, project.RunsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplates queries the templates edge of a Project.
func (c *ProjectClient) QueryTemplates(pr *Project) *TemplateQuery {
	query := &TemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TemplatesTable, project.TemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipants queries the participants edge of a Project.
func (c *ProjectClient) QueryParticipants(pr *Project) *ParticipantQuery {
	query := &ParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(participant.Table, participant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, project.ParticipantsTable, project.ParticipantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Project.
func (c *ProjectClient) QueryOwner(pr *Project) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.OwnerTable, project.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// ProviderIDClient is a client for the ProviderID schema.
type ProviderIDClient struct {
	config
}

// NewProviderIDClient returns a client for the ProviderID from the given config.
func NewProviderIDClient(c config) *ProviderIDClient {
	return &ProviderIDClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerid.Hooks(f(g(h())))`.
func (c *ProviderIDClient) Use(hooks ...Hook) {
	c.hooks.ProviderID = append(c.hooks.ProviderID, hooks...)
}

// Create returns a create builder for ProviderID.
func (c *ProviderIDClient) Create() *ProviderIDCreate {
	mutation := newProviderIDMutation(c.config, OpCreate)
	return &ProviderIDCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of ProviderID entities.
func (c *ProviderIDClient) CreateBulk(builders ...*ProviderIDCreate) *ProviderIDCreateBulk {
	return &ProviderIDCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderID.
func (c *ProviderIDClient) Update() *ProviderIDUpdate {
	mutation := newProviderIDMutation(c.config, OpUpdate)
	return &ProviderIDUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderIDClient) UpdateOne(pi *ProviderID) *ProviderIDUpdateOne {
	mutation := newProviderIDMutation(c.config, OpUpdateOne, withProviderID(pi))
	return &ProviderIDUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderIDClient) UpdateOneID(id string) *ProviderIDUpdateOne {
	mutation := newProviderIDMutation(c.config, OpUpdateOne, withProviderIDID(id))
	return &ProviderIDUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderID.
func (c *ProviderIDClient) Delete() *ProviderIDDelete {
	mutation := newProviderIDMutation(c.config, OpDelete)
	return &ProviderIDDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProviderIDClient) DeleteOne(pi *ProviderID) *ProviderIDDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProviderIDClient) DeleteOneID(id string) *ProviderIDDeleteOne {
	builder := c.Delete().Where(providerid.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderIDDeleteOne{builder}
}

// Query returns a query builder for ProviderID.
func (c *ProviderIDClient) Query() *ProviderIDQuery {
	return &ProviderIDQuery{config: c.config}
}

// Get returns a ProviderID entity by its id.
func (c *ProviderIDClient) Get(ctx context.Context, id string) (*ProviderID, error) {
	return c.Query().Where(providerid.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderIDClient) GetX(ctx context.Context, id string) *ProviderID {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParticpant queries the particpant edge of a ProviderID.
func (c *ProviderIDClient) QueryParticpant(pi *ProviderID) *ParticipantQuery {
	query := &ParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerid.Table, providerid.FieldID, id),
			sqlgraph.To(participant.Table, participant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerid.ParticpantTable, providerid.ParticpantColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderIDClient) Hooks() []Hook {
	return c.hooks.ProviderID
}

// RunClient is a client for the Run schema.
type RunClient struct {
	config
}

// NewRunClient returns a client for the Run from the given config.
func NewRunClient(c config) *RunClient {
	return &RunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `run.Hooks(f(g(h())))`.
func (c *RunClient) Use(hooks ...Hook) {
	c.hooks.Run = append(c.hooks.Run, hooks...)
}

// Create returns a create builder for Run.
func (c *RunClient) Create() *RunCreate {
	mutation := newRunMutation(c.config, OpCreate)
	return &RunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Run entities.
func (c *RunClient) CreateBulk(builders ...*RunCreate) *RunCreateBulk {
	return &RunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Run.
func (c *RunClient) Update() *RunUpdate {
	mutation := newRunMutation(c.config, OpUpdate)
	return &RunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RunClient) UpdateOne(r *Run) *RunUpdateOne {
	mutation := newRunMutation(c.config, OpUpdateOne, withRun(r))
	return &RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RunClient) UpdateOneID(id string) *RunUpdateOne {
	mutation := newRunMutation(c.config, OpUpdateOne, withRunID(id))
	return &RunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Run.
func (c *RunClient) Delete() *RunDelete {
	mutation := newRunMutation(c.config, OpDelete)
	return &RunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RunClient) DeleteOne(r *Run) *RunDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RunClient) DeleteOneID(id string) *RunDeleteOne {
	builder := c.Delete().Where(run.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RunDeleteOne{builder}
}

// Query returns a query builder for Run.
func (c *RunClient) Query() *RunQuery {
	return &RunQuery{config: c.config}
}

// Get returns a Run entity by its id.
func (c *RunClient) Get(ctx context.Context, id string) (*Run, error) {
	return c.Query().Where(run.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RunClient) GetX(ctx context.Context, id string) *Run {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Run.
func (c *RunClient) QueryProject(r *Run) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(run.Table, run.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, run.ProjectTable, run.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a Run.
func (c *RunClient) QueryTemplate(r *Run) *TemplateQuery {
	query := &TemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(run.Table, run.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, run.TemplateTable, run.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentStep queries the currentStep edge of a Run.
func (c *RunClient) QueryCurrentStep(r *Run) *StepRunQuery {
	query := &StepRunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(run.Table, run.FieldID, id),
			sqlgraph.To(steprun.Table, steprun.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, run.CurrentStepTable, run.CurrentStepColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySteps queries the steps edge of a Run.
func (c *RunClient) QuerySteps(r *Run) *StepRunQuery {
	query := &StepRunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(run.Table, run.FieldID, id),
			sqlgraph.To(steprun.Table, steprun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, run.StepsTable, run.StepsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RunClient) Hooks() []Hook {
	return c.hooks.Run
}

// StepClient is a client for the Step schema.
type StepClient struct {
	config
}

// NewStepClient returns a client for the Step from the given config.
func NewStepClient(c config) *StepClient {
	return &StepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `step.Hooks(f(g(h())))`.
func (c *StepClient) Use(hooks ...Hook) {
	c.hooks.Step = append(c.hooks.Step, hooks...)
}

// Create returns a create builder for Step.
func (c *StepClient) Create() *StepCreate {
	mutation := newStepMutation(c.config, OpCreate)
	return &StepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Step entities.
func (c *StepClient) CreateBulk(builders ...*StepCreate) *StepCreateBulk {
	return &StepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Step.
func (c *StepClient) Update() *StepUpdate {
	mutation := newStepMutation(c.config, OpUpdate)
	return &StepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StepClient) UpdateOne(s *Step) *StepUpdateOne {
	mutation := newStepMutation(c.config, OpUpdateOne, withStep(s))
	return &StepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StepClient) UpdateOneID(id string) *StepUpdateOne {
	mutation := newStepMutation(c.config, OpUpdateOne, withStepID(id))
	return &StepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Step.
func (c *StepClient) Delete() *StepDelete {
	mutation := newStepMutation(c.config, OpDelete)
	return &StepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StepClient) DeleteOne(s *Step) *StepDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StepClient) DeleteOneID(id string) *StepDeleteOne {
	builder := c.Delete().Where(step.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StepDeleteOne{builder}
}

// Query returns a query builder for Step.
func (c *StepClient) Query() *StepQuery {
	return &StepQuery{config: c.config}
}

// Get returns a Step entity by its id.
func (c *StepClient) Get(ctx context.Context, id string) (*Step, error) {
	return c.Query().Where(step.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StepClient) GetX(ctx context.Context, id string) *Step {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStepRun queries the stepRun edge of a Step.
func (c *StepClient) QueryStepRun(s *Step) *StepRunQuery {
	query := &StepRunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(step.Table, step.FieldID, id),
			sqlgraph.To(steprun.Table, steprun.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, step.StepRunTable, step.StepRunColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a Step.
func (c *StepClient) QueryTemplate(s *Step) *TemplateQuery {
	query := &TemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(step.Table, step.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, step.TemplateTable, step.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StepClient) Hooks() []Hook {
	return c.hooks.Step
}

// StepRunClient is a client for the StepRun schema.
type StepRunClient struct {
	config
}

// NewStepRunClient returns a client for the StepRun from the given config.
func NewStepRunClient(c config) *StepRunClient {
	return &StepRunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `steprun.Hooks(f(g(h())))`.
func (c *StepRunClient) Use(hooks ...Hook) {
	c.hooks.StepRun = append(c.hooks.StepRun, hooks...)
}

// Create returns a create builder for StepRun.
func (c *StepRunClient) Create() *StepRunCreate {
	mutation := newStepRunMutation(c.config, OpCreate)
	return &StepRunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of StepRun entities.
func (c *StepRunClient) CreateBulk(builders ...*StepRunCreate) *StepRunCreateBulk {
	return &StepRunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StepRun.
func (c *StepRunClient) Update() *StepRunUpdate {
	mutation := newStepRunMutation(c.config, OpUpdate)
	return &StepRunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StepRunClient) UpdateOne(sr *StepRun) *StepRunUpdateOne {
	mutation := newStepRunMutation(c.config, OpUpdateOne, withStepRun(sr))
	return &StepRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StepRunClient) UpdateOneID(id string) *StepRunUpdateOne {
	mutation := newStepRunMutation(c.config, OpUpdateOne, withStepRunID(id))
	return &StepRunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StepRun.
func (c *StepRunClient) Delete() *StepRunDelete {
	mutation := newStepRunMutation(c.config, OpDelete)
	return &StepRunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StepRunClient) DeleteOne(sr *StepRun) *StepRunDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StepRunClient) DeleteOneID(id string) *StepRunDeleteOne {
	builder := c.Delete().Where(steprun.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StepRunDeleteOne{builder}
}

// Query returns a query builder for StepRun.
func (c *StepRunClient) Query() *StepRunQuery {
	return &StepRunQuery{config: c.config}
}

// Get returns a StepRun entity by its id.
func (c *StepRunClient) Get(ctx context.Context, id string) (*StepRun, error) {
	return c.Query().Where(steprun.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StepRunClient) GetX(ctx context.Context, id string) *StepRun {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreatedParticipants queries the createdParticipants edge of a StepRun.
func (c *StepRunClient) QueryCreatedParticipants(sr *StepRun) *ParticipantQuery {
	query := &ParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(steprun.Table, steprun.FieldID, id),
			sqlgraph.To(participant.Table, participant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, steprun.CreatedParticipantsTable, steprun.CreatedParticipantsColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipants queries the participants edge of a StepRun.
func (c *StepRunClient) QueryParticipants(sr *StepRun) *ParticipantQuery {
	query := &ParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(steprun.Table, steprun.FieldID, id),
			sqlgraph.To(participant.Table, participant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, steprun.ParticipantsTable, steprun.ParticipantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParticipations queries the participations edge of a StepRun.
func (c *StepRunClient) QueryParticipations(sr *StepRun) *ParticipationQuery {
	query := &ParticipationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(steprun.Table, steprun.FieldID, id),
			sqlgraph.To(participation.Table, participation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, steprun.ParticipationsTable, steprun.ParticipationsColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStep queries the step edge of a StepRun.
func (c *StepRunClient) QueryStep(sr *StepRun) *StepQuery {
	query := &StepQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(steprun.Table, steprun.FieldID, id),
			sqlgraph.To(step.Table, step.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, steprun.StepTable, steprun.StepColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRun queries the run edge of a StepRun.
func (c *StepRunClient) QueryRun(sr *StepRun) *RunQuery {
	query := &RunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(steprun.Table, steprun.FieldID, id),
			sqlgraph.To(run.Table, run.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, steprun.RunTable, steprun.RunColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StepRunClient) Hooks() []Hook {
	return c.hooks.StepRun
}

// TemplateClient is a client for the Template schema.
type TemplateClient struct {
	config
}

// NewTemplateClient returns a client for the Template from the given config.
func NewTemplateClient(c config) *TemplateClient {
	return &TemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `template.Hooks(f(g(h())))`.
func (c *TemplateClient) Use(hooks ...Hook) {
	c.hooks.Template = append(c.hooks.Template, hooks...)
}

// Create returns a create builder for Template.
func (c *TemplateClient) Create() *TemplateCreate {
	mutation := newTemplateMutation(c.config, OpCreate)
	return &TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Template entities.
func (c *TemplateClient) CreateBulk(builders ...*TemplateCreate) *TemplateCreateBulk {
	return &TemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Template.
func (c *TemplateClient) Update() *TemplateUpdate {
	mutation := newTemplateMutation(c.config, OpUpdate)
	return &TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateClient) UpdateOne(t *Template) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplate(t))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateClient) UpdateOneID(id string) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplateID(id))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Template.
func (c *TemplateClient) Delete() *TemplateDelete {
	mutation := newTemplateMutation(c.config, OpDelete)
	return &TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemplateClient) DeleteOne(t *Template) *TemplateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemplateClient) DeleteOneID(id string) *TemplateDeleteOne {
	builder := c.Delete().Where(template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateDeleteOne{builder}
}

// Query returns a query builder for Template.
func (c *TemplateClient) Query() *TemplateQuery {
	return &TemplateQuery{config: c.config}
}

// Get returns a Template entity by its id.
func (c *TemplateClient) Get(ctx context.Context, id string) (*Template, error) {
	return c.Query().Where(template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateClient) GetX(ctx context.Context, id string) *Template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySteps queries the steps edge of a Template.
func (c *TemplateClient) QuerySteps(t *Template) *StepQuery {
	query := &StepQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(step.Table, step.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, template.StepsTable, template.StepsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a Template.
func (c *TemplateClient) QueryProject(t *Template) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, template.ProjectTable, template.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Template.
func (c *TemplateClient) QueryCreator(t *Template) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, template.CreatorTable, template.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRun queries the run edge of a Template.
func (c *TemplateClient) QueryRun(t *Template) *RunQuery {
	query := &RunQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(run.Table, run.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, template.RunTable, template.RunColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemplateClient) Hooks() []Hook {
	return c.hooks.Template
}
