// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/empiricaly/recruitment/internal/ent/providerid"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ProviderIDUpdate is the builder for updating ProviderID entities.
type ProviderIDUpdate struct {
	config
	hooks      []Hook
	mutation   *ProviderIDMutation
	predicates []predicate.ProviderID
}

// Where adds a new predicate for the builder.
func (piu *ProviderIDUpdate) Where(ps ...predicate.ProviderID) *ProviderIDUpdate {
	piu.predicates = append(piu.predicates, ps...)
	return piu
}

// SetUpdatedAt sets the updated_at field.
func (piu *ProviderIDUpdate) SetUpdatedAt(t time.Time) *ProviderIDUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetMturkWorkerID sets the mturkWorkerID field.
func (piu *ProviderIDUpdate) SetMturkWorkerID(s string) *ProviderIDUpdate {
	piu.mutation.SetMturkWorkerID(s)
	return piu
}

// SetParticpantID sets the particpant edge to Participant by id.
func (piu *ProviderIDUpdate) SetParticpantID(id string) *ProviderIDUpdate {
	piu.mutation.SetParticpantID(id)
	return piu
}

// SetNillableParticpantID sets the particpant edge to Participant by id if the given value is not nil.
func (piu *ProviderIDUpdate) SetNillableParticpantID(id *string) *ProviderIDUpdate {
	if id != nil {
		piu = piu.SetParticpantID(*id)
	}
	return piu
}

// SetParticpant sets the particpant edge to Participant.
func (piu *ProviderIDUpdate) SetParticpant(p *Participant) *ProviderIDUpdate {
	return piu.SetParticpantID(p.ID)
}

// Mutation returns the ProviderIDMutation object of the builder.
func (piu *ProviderIDUpdate) Mutation() *ProviderIDMutation {
	return piu.mutation
}

// ClearParticpant clears the particpant edge to Participant.
func (piu *ProviderIDUpdate) ClearParticpant() *ProviderIDUpdate {
	piu.mutation.ClearParticpant()
	return piu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (piu *ProviderIDUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := providerid.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(piu.hooks) == 0 {
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProviderIDMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProviderIDUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProviderIDUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProviderIDUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *ProviderIDUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   providerid.Table,
			Columns: providerid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: providerid.FieldID,
			},
		},
	}
	if ps := piu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: providerid.FieldUpdatedAt,
		})
	}
	if value, ok := piu.mutation.MturkWorkerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: providerid.FieldMturkWorkerID,
		})
	}
	if piu.mutation.ParticpantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerid.ParticpantTable,
			Columns: []string{providerid.ParticpantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ParticpantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerid.ParticpantTable,
			Columns: []string{providerid.ParticpantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProviderIDUpdateOne is the builder for updating a single ProviderID entity.
type ProviderIDUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProviderIDMutation
}

// SetUpdatedAt sets the updated_at field.
func (piuo *ProviderIDUpdateOne) SetUpdatedAt(t time.Time) *ProviderIDUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetMturkWorkerID sets the mturkWorkerID field.
func (piuo *ProviderIDUpdateOne) SetMturkWorkerID(s string) *ProviderIDUpdateOne {
	piuo.mutation.SetMturkWorkerID(s)
	return piuo
}

// SetParticpantID sets the particpant edge to Participant by id.
func (piuo *ProviderIDUpdateOne) SetParticpantID(id string) *ProviderIDUpdateOne {
	piuo.mutation.SetParticpantID(id)
	return piuo
}

// SetNillableParticpantID sets the particpant edge to Participant by id if the given value is not nil.
func (piuo *ProviderIDUpdateOne) SetNillableParticpantID(id *string) *ProviderIDUpdateOne {
	if id != nil {
		piuo = piuo.SetParticpantID(*id)
	}
	return piuo
}

// SetParticpant sets the particpant edge to Participant.
func (piuo *ProviderIDUpdateOne) SetParticpant(p *Participant) *ProviderIDUpdateOne {
	return piuo.SetParticpantID(p.ID)
}

// Mutation returns the ProviderIDMutation object of the builder.
func (piuo *ProviderIDUpdateOne) Mutation() *ProviderIDMutation {
	return piuo.mutation
}

// ClearParticpant clears the particpant edge to Participant.
func (piuo *ProviderIDUpdateOne) ClearParticpant() *ProviderIDUpdateOne {
	piuo.mutation.ClearParticpant()
	return piuo
}

// Save executes the query and returns the updated entity.
func (piuo *ProviderIDUpdateOne) Save(ctx context.Context) (*ProviderID, error) {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := providerid.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *ProviderID
	)
	if len(piuo.hooks) == 0 {
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProviderIDMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			mut = piuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProviderIDUpdateOne) SaveX(ctx context.Context) *ProviderID {
	pi, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pi
}

// Exec executes the query on the entity.
func (piuo *ProviderIDUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProviderIDUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *ProviderIDUpdateOne) sqlSave(ctx context.Context) (pi *ProviderID, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   providerid.Table,
			Columns: providerid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: providerid.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProviderID.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: providerid.FieldUpdatedAt,
		})
	}
	if value, ok := piuo.mutation.MturkWorkerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: providerid.FieldMturkWorkerID,
		})
	}
	if piuo.mutation.ParticpantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerid.ParticpantTable,
			Columns: []string{providerid.ParticpantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ParticpantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerid.ParticpantTable,
			Columns: []string{providerid.ParticpantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pi = &ProviderID{config: piuo.config}
	_spec.Assign = pi.assignValues
	_spec.ScanValues = pi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pi, nil
}
