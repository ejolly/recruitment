// Code generated by entc, DO NOT EDIT.

package steprun

import (
	"time"

	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StartAt applies equality check predicate on the "startAt" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndedAt applies equality check predicate on the "endedAt" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndedAt), v))
	})
}

// ParticipantsCount applies equality check predicate on the "participantsCount" field. It's identical to ParticipantsCountEQ.
func ParticipantsCount(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParticipantsCount), v))
	})
}

// StartAtEQ applies the EQ predicate on the "startAt" field.
func StartAtEQ(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "startAt" field.
func StartAtNEQ(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "startAt" field.
func StartAtIn(vs ...time.Time) predicate.StepRun {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "startAt" field.
func StartAtNotIn(vs ...time.Time) predicate.StepRun {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "startAt" field.
func StartAtGT(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "startAt" field.
func StartAtGTE(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "startAt" field.
func StartAtLT(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "startAt" field.
func StartAtLTE(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// EndedAtEQ applies the EQ predicate on the "endedAt" field.
func EndedAtEQ(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndedAt), v))
	})
}

// EndedAtNEQ applies the NEQ predicate on the "endedAt" field.
func EndedAtNEQ(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndedAt), v))
	})
}

// EndedAtIn applies the In predicate on the "endedAt" field.
func EndedAtIn(vs ...time.Time) predicate.StepRun {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndedAt), v...))
	})
}

// EndedAtNotIn applies the NotIn predicate on the "endedAt" field.
func EndedAtNotIn(vs ...time.Time) predicate.StepRun {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndedAt), v...))
	})
}

// EndedAtGT applies the GT predicate on the "endedAt" field.
func EndedAtGT(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndedAt), v))
	})
}

// EndedAtGTE applies the GTE predicate on the "endedAt" field.
func EndedAtGTE(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndedAt), v))
	})
}

// EndedAtLT applies the LT predicate on the "endedAt" field.
func EndedAtLT(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndedAt), v))
	})
}

// EndedAtLTE applies the LTE predicate on the "endedAt" field.
func EndedAtLTE(v time.Time) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndedAt), v))
	})
}

// ParticipantsCountEQ applies the EQ predicate on the "participantsCount" field.
func ParticipantsCountEQ(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParticipantsCount), v))
	})
}

// ParticipantsCountNEQ applies the NEQ predicate on the "participantsCount" field.
func ParticipantsCountNEQ(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParticipantsCount), v))
	})
}

// ParticipantsCountIn applies the In predicate on the "participantsCount" field.
func ParticipantsCountIn(vs ...int) predicate.StepRun {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParticipantsCount), v...))
	})
}

// ParticipantsCountNotIn applies the NotIn predicate on the "participantsCount" field.
func ParticipantsCountNotIn(vs ...int) predicate.StepRun {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StepRun(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParticipantsCount), v...))
	})
}

// ParticipantsCountGT applies the GT predicate on the "participantsCount" field.
func ParticipantsCountGT(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParticipantsCount), v))
	})
}

// ParticipantsCountGTE applies the GTE predicate on the "participantsCount" field.
func ParticipantsCountGTE(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParticipantsCount), v))
	})
}

// ParticipantsCountLT applies the LT predicate on the "participantsCount" field.
func ParticipantsCountLT(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParticipantsCount), v))
	})
}

// ParticipantsCountLTE applies the LTE predicate on the "participantsCount" field.
func ParticipantsCountLTE(v int) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParticipantsCount), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.StepRun) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.StepRun) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StepRun) predicate.StepRun {
	return predicate.StepRun(func(s *sql.Selector) {
		p(s.Not())
	})
}
