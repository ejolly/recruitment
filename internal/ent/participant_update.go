// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/participation"
	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/empiricaly/recruitment/internal/ent/providerid"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ParticipantUpdate is the builder for updating Participant entities.
type ParticipantUpdate struct {
	config
	hooks      []Hook
	mutation   *ParticipantMutation
	predicates []predicate.Participant
}

// Where adds a new predicate for the builder.
func (pu *ParticipantUpdate) Where(ps ...predicate.Participant) *ParticipantUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *ParticipantUpdate) SetUpdatedAt(t time.Time) *ParticipantUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetMturkWorkerID sets the mturkWorkerID field.
func (pu *ParticipantUpdate) SetMturkWorkerID(s string) *ParticipantUpdate {
	pu.mutation.SetMturkWorkerID(s)
	return pu
}

// AddProviderIDIDs adds the providerIDs edge to ProviderID by ids.
func (pu *ParticipantUpdate) AddProviderIDIDs(ids ...string) *ParticipantUpdate {
	pu.mutation.AddProviderIDIDs(ids...)
	return pu
}

// AddProviderIDs adds the providerIDs edges to ProviderID.
func (pu *ParticipantUpdate) AddProviderIDs(p ...*ProviderID) *ParticipantUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProviderIDIDs(ids...)
}

// AddParticipationIDs adds the participations edge to Participation by ids.
func (pu *ParticipantUpdate) AddParticipationIDs(ids ...string) *ParticipantUpdate {
	pu.mutation.AddParticipationIDs(ids...)
	return pu
}

// AddParticipations adds the participations edges to Participation.
func (pu *ParticipantUpdate) AddParticipations(p ...*Participation) *ParticipantUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddParticipationIDs(ids...)
}

// SetCreatedByID sets the createdBy edge to StepRun by id.
func (pu *ParticipantUpdate) SetCreatedByID(id string) *ParticipantUpdate {
	pu.mutation.SetCreatedByID(id)
	return pu
}

// SetNillableCreatedByID sets the createdBy edge to StepRun by id if the given value is not nil.
func (pu *ParticipantUpdate) SetNillableCreatedByID(id *string) *ParticipantUpdate {
	if id != nil {
		pu = pu.SetCreatedByID(*id)
	}
	return pu
}

// SetCreatedBy sets the createdBy edge to StepRun.
func (pu *ParticipantUpdate) SetCreatedBy(s *StepRun) *ParticipantUpdate {
	return pu.SetCreatedByID(s.ID)
}

// AddStepIDs adds the steps edge to StepRun by ids.
func (pu *ParticipantUpdate) AddStepIDs(ids ...string) *ParticipantUpdate {
	pu.mutation.AddStepIDs(ids...)
	return pu
}

// AddSteps adds the steps edges to StepRun.
func (pu *ParticipantUpdate) AddSteps(s ...*StepRun) *ParticipantUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddStepIDs(ids...)
}

// Mutation returns the ParticipantMutation object of the builder.
func (pu *ParticipantUpdate) Mutation() *ParticipantMutation {
	return pu.mutation
}

// RemoveProviderIDIDs removes the providerIDs edge to ProviderID by ids.
func (pu *ParticipantUpdate) RemoveProviderIDIDs(ids ...string) *ParticipantUpdate {
	pu.mutation.RemoveProviderIDIDs(ids...)
	return pu
}

// RemoveProviderIDs removes providerIDs edges to ProviderID.
func (pu *ParticipantUpdate) RemoveProviderIDs(p ...*ProviderID) *ParticipantUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProviderIDIDs(ids...)
}

// RemoveParticipationIDs removes the participations edge to Participation by ids.
func (pu *ParticipantUpdate) RemoveParticipationIDs(ids ...string) *ParticipantUpdate {
	pu.mutation.RemoveParticipationIDs(ids...)
	return pu
}

// RemoveParticipations removes participations edges to Participation.
func (pu *ParticipantUpdate) RemoveParticipations(p ...*Participation) *ParticipantUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveParticipationIDs(ids...)
}

// ClearCreatedBy clears the createdBy edge to StepRun.
func (pu *ParticipantUpdate) ClearCreatedBy() *ParticipantUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// RemoveStepIDs removes the steps edge to StepRun by ids.
func (pu *ParticipantUpdate) RemoveStepIDs(ids ...string) *ParticipantUpdate {
	pu.mutation.RemoveStepIDs(ids...)
	return pu
}

// RemoveSteps removes steps edges to StepRun.
func (pu *ParticipantUpdate) RemoveSteps(s ...*StepRun) *ParticipantUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveStepIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ParticipantUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := participant.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ParticipantUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ParticipantUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   participant.Table,
			Columns: participant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: participant.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participant.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.MturkWorkerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participant.FieldMturkWorkerID,
		})
	}
	if nodes := pu.mutation.RemovedProviderIDsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ProviderIDsTable,
			Columns: []string{participant.ProviderIDsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: providerid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProviderIDsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ProviderIDsTable,
			Columns: []string{participant.ProviderIDsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: providerid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.mutation.RemovedParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ParticipationsTable,
			Columns: []string{participant.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ParticipationsTable,
			Columns: []string{participant.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participant.CreatedByTable,
			Columns: []string{participant.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participant.CreatedByTable,
			Columns: []string{participant.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.mutation.RemovedStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   participant.StepsTable,
			Columns: participant.StepsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   participant.StepsTable,
			Columns: participant.StepsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ParticipantUpdateOne is the builder for updating a single Participant entity.
type ParticipantUpdateOne struct {
	config
	hooks    []Hook
	mutation *ParticipantMutation
}

// SetUpdatedAt sets the updated_at field.
func (puo *ParticipantUpdateOne) SetUpdatedAt(t time.Time) *ParticipantUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetMturkWorkerID sets the mturkWorkerID field.
func (puo *ParticipantUpdateOne) SetMturkWorkerID(s string) *ParticipantUpdateOne {
	puo.mutation.SetMturkWorkerID(s)
	return puo
}

// AddProviderIDIDs adds the providerIDs edge to ProviderID by ids.
func (puo *ParticipantUpdateOne) AddProviderIDIDs(ids ...string) *ParticipantUpdateOne {
	puo.mutation.AddProviderIDIDs(ids...)
	return puo
}

// AddProviderIDs adds the providerIDs edges to ProviderID.
func (puo *ParticipantUpdateOne) AddProviderIDs(p ...*ProviderID) *ParticipantUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProviderIDIDs(ids...)
}

// AddParticipationIDs adds the participations edge to Participation by ids.
func (puo *ParticipantUpdateOne) AddParticipationIDs(ids ...string) *ParticipantUpdateOne {
	puo.mutation.AddParticipationIDs(ids...)
	return puo
}

// AddParticipations adds the participations edges to Participation.
func (puo *ParticipantUpdateOne) AddParticipations(p ...*Participation) *ParticipantUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddParticipationIDs(ids...)
}

// SetCreatedByID sets the createdBy edge to StepRun by id.
func (puo *ParticipantUpdateOne) SetCreatedByID(id string) *ParticipantUpdateOne {
	puo.mutation.SetCreatedByID(id)
	return puo
}

// SetNillableCreatedByID sets the createdBy edge to StepRun by id if the given value is not nil.
func (puo *ParticipantUpdateOne) SetNillableCreatedByID(id *string) *ParticipantUpdateOne {
	if id != nil {
		puo = puo.SetCreatedByID(*id)
	}
	return puo
}

// SetCreatedBy sets the createdBy edge to StepRun.
func (puo *ParticipantUpdateOne) SetCreatedBy(s *StepRun) *ParticipantUpdateOne {
	return puo.SetCreatedByID(s.ID)
}

// AddStepIDs adds the steps edge to StepRun by ids.
func (puo *ParticipantUpdateOne) AddStepIDs(ids ...string) *ParticipantUpdateOne {
	puo.mutation.AddStepIDs(ids...)
	return puo
}

// AddSteps adds the steps edges to StepRun.
func (puo *ParticipantUpdateOne) AddSteps(s ...*StepRun) *ParticipantUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddStepIDs(ids...)
}

// Mutation returns the ParticipantMutation object of the builder.
func (puo *ParticipantUpdateOne) Mutation() *ParticipantMutation {
	return puo.mutation
}

// RemoveProviderIDIDs removes the providerIDs edge to ProviderID by ids.
func (puo *ParticipantUpdateOne) RemoveProviderIDIDs(ids ...string) *ParticipantUpdateOne {
	puo.mutation.RemoveProviderIDIDs(ids...)
	return puo
}

// RemoveProviderIDs removes providerIDs edges to ProviderID.
func (puo *ParticipantUpdateOne) RemoveProviderIDs(p ...*ProviderID) *ParticipantUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProviderIDIDs(ids...)
}

// RemoveParticipationIDs removes the participations edge to Participation by ids.
func (puo *ParticipantUpdateOne) RemoveParticipationIDs(ids ...string) *ParticipantUpdateOne {
	puo.mutation.RemoveParticipationIDs(ids...)
	return puo
}

// RemoveParticipations removes participations edges to Participation.
func (puo *ParticipantUpdateOne) RemoveParticipations(p ...*Participation) *ParticipantUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveParticipationIDs(ids...)
}

// ClearCreatedBy clears the createdBy edge to StepRun.
func (puo *ParticipantUpdateOne) ClearCreatedBy() *ParticipantUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// RemoveStepIDs removes the steps edge to StepRun by ids.
func (puo *ParticipantUpdateOne) RemoveStepIDs(ids ...string) *ParticipantUpdateOne {
	puo.mutation.RemoveStepIDs(ids...)
	return puo
}

// RemoveSteps removes steps edges to StepRun.
func (puo *ParticipantUpdateOne) RemoveSteps(s ...*StepRun) *ParticipantUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveStepIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *ParticipantUpdateOne) Save(ctx context.Context) (*Participant, error) {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := participant.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *Participant
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ParticipantUpdateOne) SaveX(ctx context.Context) *Participant {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *ParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ParticipantUpdateOne) sqlSave(ctx context.Context) (pa *Participant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   participant.Table,
			Columns: participant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: participant.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Participant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participant.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.MturkWorkerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participant.FieldMturkWorkerID,
		})
	}
	if nodes := puo.mutation.RemovedProviderIDsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ProviderIDsTable,
			Columns: []string{participant.ProviderIDsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: providerid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProviderIDsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ProviderIDsTable,
			Columns: []string{participant.ProviderIDsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: providerid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.mutation.RemovedParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ParticipationsTable,
			Columns: []string{participant.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   participant.ParticipationsTable,
			Columns: []string{participant.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participant.CreatedByTable,
			Columns: []string{participant.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participant.CreatedByTable,
			Columns: []string{participant.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.mutation.RemovedStepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   participant.StepsTable,
			Columns: participant.StepsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   participant.StepsTable,
			Columns: participant.StepsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Participant{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
