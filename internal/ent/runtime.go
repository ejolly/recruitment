// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/empiricaly/recruitment/internal/ent/admin"
	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/participation"
	"github.com/empiricaly/recruitment/internal/ent/project"
	"github.com/empiricaly/recruitment/internal/ent/providerid"
	"github.com/empiricaly/recruitment/internal/ent/run"
	"github.com/empiricaly/recruitment/internal/ent/schema"
	"github.com/empiricaly/recruitment/internal/ent/step"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/empiricaly/recruitment/internal/ent/template"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	adminMixin := schema.Admin{}.Mixin()
	adminMixinFields0 := adminMixin[0].Fields()
	adminFields := schema.Admin{}.Fields()
	_ = adminFields
	// adminDescCreatedAt is the schema descriptor for created_at field.
	adminDescCreatedAt := adminMixinFields0[1].Descriptor()
	// admin.DefaultCreatedAt holds the default value on creation for the created_at field.
	admin.DefaultCreatedAt = adminDescCreatedAt.Default.(func() time.Time)
	// adminDescUpdatedAt is the schema descriptor for updated_at field.
	adminDescUpdatedAt := adminMixinFields0[2].Descriptor()
	// admin.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	admin.DefaultUpdatedAt = adminDescUpdatedAt.Default.(func() time.Time)
	// admin.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	admin.UpdateDefaultUpdatedAt = adminDescUpdatedAt.UpdateDefault.(func() time.Time)
	// adminDescID is the schema descriptor for id field.
	adminDescID := adminMixinFields0[0].Descriptor()
	// admin.IDValidator is a validator for the "id" field. It is called by the builders before save.
	admin.IDValidator = func() func(string) error {
		validators := adminDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	participantMixin := schema.Participant{}.Mixin()
	participantMixinFields0 := participantMixin[0].Fields()
	participantFields := schema.Participant{}.Fields()
	_ = participantFields
	// participantDescCreatedAt is the schema descriptor for created_at field.
	participantDescCreatedAt := participantMixinFields0[1].Descriptor()
	// participant.DefaultCreatedAt holds the default value on creation for the created_at field.
	participant.DefaultCreatedAt = participantDescCreatedAt.Default.(func() time.Time)
	// participantDescUpdatedAt is the schema descriptor for updated_at field.
	participantDescUpdatedAt := participantMixinFields0[2].Descriptor()
	// participant.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	participant.DefaultUpdatedAt = participantDescUpdatedAt.Default.(func() time.Time)
	// participant.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	participant.UpdateDefaultUpdatedAt = participantDescUpdatedAt.UpdateDefault.(func() time.Time)
	// participantDescID is the schema descriptor for id field.
	participantDescID := participantMixinFields0[0].Descriptor()
	// participant.IDValidator is a validator for the "id" field. It is called by the builders before save.
	participant.IDValidator = func() func(string) error {
		validators := participantDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	participationMixin := schema.Participation{}.Mixin()
	participationMixinFields0 := participationMixin[0].Fields()
	participationFields := schema.Participation{}.Fields()
	_ = participationFields
	// participationDescCreatedAt is the schema descriptor for created_at field.
	participationDescCreatedAt := participationMixinFields0[1].Descriptor()
	// participation.DefaultCreatedAt holds the default value on creation for the created_at field.
	participation.DefaultCreatedAt = participationDescCreatedAt.Default.(func() time.Time)
	// participationDescUpdatedAt is the schema descriptor for updated_at field.
	participationDescUpdatedAt := participationMixinFields0[2].Descriptor()
	// participation.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	participation.DefaultUpdatedAt = participationDescUpdatedAt.Default.(func() time.Time)
	// participation.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	participation.UpdateDefaultUpdatedAt = participationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// participationDescID is the schema descriptor for id field.
	participationDescID := participationMixinFields0[0].Descriptor()
	// participation.IDValidator is a validator for the "id" field. It is called by the builders before save.
	participation.IDValidator = func() func(string) error {
		validators := participationDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	projectMixin := schema.Project{}.Mixin()
	projectMixinFields0 := projectMixin[0].Fields()
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectMixinFields0[1].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectMixinFields0[2].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	// project.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	project.UpdateDefaultUpdatedAt = projectDescUpdatedAt.UpdateDefault.(func() time.Time)
	// projectDescID is the schema descriptor for id field.
	projectDescID := projectMixinFields0[0].Descriptor()
	// project.IDValidator is a validator for the "id" field. It is called by the builders before save.
	project.IDValidator = func() func(string) error {
		validators := projectDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	provideridMixin := schema.ProviderID{}.Mixin()
	provideridMixinFields0 := provideridMixin[0].Fields()
	provideridFields := schema.ProviderID{}.Fields()
	_ = provideridFields
	// provideridDescCreatedAt is the schema descriptor for created_at field.
	provideridDescCreatedAt := provideridMixinFields0[1].Descriptor()
	// providerid.DefaultCreatedAt holds the default value on creation for the created_at field.
	providerid.DefaultCreatedAt = provideridDescCreatedAt.Default.(func() time.Time)
	// provideridDescUpdatedAt is the schema descriptor for updated_at field.
	provideridDescUpdatedAt := provideridMixinFields0[2].Descriptor()
	// providerid.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	providerid.DefaultUpdatedAt = provideridDescUpdatedAt.Default.(func() time.Time)
	// providerid.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	providerid.UpdateDefaultUpdatedAt = provideridDescUpdatedAt.UpdateDefault.(func() time.Time)
	// provideridDescID is the schema descriptor for id field.
	provideridDescID := provideridMixinFields0[0].Descriptor()
	// providerid.IDValidator is a validator for the "id" field. It is called by the builders before save.
	providerid.IDValidator = func() func(string) error {
		validators := provideridDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	runMixin := schema.Run{}.Mixin()
	runMixinFields0 := runMixin[0].Fields()
	runFields := schema.Run{}.Fields()
	_ = runFields
	// runDescCreatedAt is the schema descriptor for created_at field.
	runDescCreatedAt := runMixinFields0[1].Descriptor()
	// run.DefaultCreatedAt holds the default value on creation for the created_at field.
	run.DefaultCreatedAt = runDescCreatedAt.Default.(func() time.Time)
	// runDescUpdatedAt is the schema descriptor for updated_at field.
	runDescUpdatedAt := runMixinFields0[2].Descriptor()
	// run.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	run.DefaultUpdatedAt = runDescUpdatedAt.Default.(func() time.Time)
	// run.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	run.UpdateDefaultUpdatedAt = runDescUpdatedAt.UpdateDefault.(func() time.Time)
	// runDescID is the schema descriptor for id field.
	runDescID := runMixinFields0[0].Descriptor()
	// run.IDValidator is a validator for the "id" field. It is called by the builders before save.
	run.IDValidator = func() func(string) error {
		validators := runDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	stepMixin := schema.Step{}.Mixin()
	stepMixinFields0 := stepMixin[0].Fields()
	stepFields := schema.Step{}.Fields()
	_ = stepFields
	// stepDescCreatedAt is the schema descriptor for created_at field.
	stepDescCreatedAt := stepMixinFields0[1].Descriptor()
	// step.DefaultCreatedAt holds the default value on creation for the created_at field.
	step.DefaultCreatedAt = stepDescCreatedAt.Default.(func() time.Time)
	// stepDescUpdatedAt is the schema descriptor for updated_at field.
	stepDescUpdatedAt := stepMixinFields0[2].Descriptor()
	// step.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	step.DefaultUpdatedAt = stepDescUpdatedAt.Default.(func() time.Time)
	// step.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	step.UpdateDefaultUpdatedAt = stepDescUpdatedAt.UpdateDefault.(func() time.Time)
	// stepDescID is the schema descriptor for id field.
	stepDescID := stepMixinFields0[0].Descriptor()
	// step.IDValidator is a validator for the "id" field. It is called by the builders before save.
	step.IDValidator = func() func(string) error {
		validators := stepDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	steprunMixin := schema.StepRun{}.Mixin()
	steprunMixinFields0 := steprunMixin[0].Fields()
	steprunFields := schema.StepRun{}.Fields()
	_ = steprunFields
	// steprunDescCreatedAt is the schema descriptor for created_at field.
	steprunDescCreatedAt := steprunMixinFields0[1].Descriptor()
	// steprun.DefaultCreatedAt holds the default value on creation for the created_at field.
	steprun.DefaultCreatedAt = steprunDescCreatedAt.Default.(func() time.Time)
	// steprunDescUpdatedAt is the schema descriptor for updated_at field.
	steprunDescUpdatedAt := steprunMixinFields0[2].Descriptor()
	// steprun.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	steprun.DefaultUpdatedAt = steprunDescUpdatedAt.Default.(func() time.Time)
	// steprun.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	steprun.UpdateDefaultUpdatedAt = steprunDescUpdatedAt.UpdateDefault.(func() time.Time)
	// steprunDescID is the schema descriptor for id field.
	steprunDescID := steprunMixinFields0[0].Descriptor()
	// steprun.IDValidator is a validator for the "id" field. It is called by the builders before save.
	steprun.IDValidator = func() func(string) error {
		validators := steprunDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	templateMixin := schema.Template{}.Mixin()
	templateMixinFields0 := templateMixin[0].Fields()
	templateFields := schema.Template{}.Fields()
	_ = templateFields
	// templateDescCreatedAt is the schema descriptor for created_at field.
	templateDescCreatedAt := templateMixinFields0[1].Descriptor()
	// template.DefaultCreatedAt holds the default value on creation for the created_at field.
	template.DefaultCreatedAt = templateDescCreatedAt.Default.(func() time.Time)
	// templateDescUpdatedAt is the schema descriptor for updated_at field.
	templateDescUpdatedAt := templateMixinFields0[2].Descriptor()
	// template.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	template.DefaultUpdatedAt = templateDescUpdatedAt.Default.(func() time.Time)
	// template.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	template.UpdateDefaultUpdatedAt = templateDescUpdatedAt.UpdateDefault.(func() time.Time)
	// templateDescName is the schema descriptor for name field.
	templateDescName := templateFields[0].Descriptor()
	// template.NameValidator is a validator for the "name" field. It is called by the builders before save.
	template.NameValidator = func() func(string) error {
		validators := templateDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// templateDescParticipantCount is the schema descriptor for participantCount field.
	templateDescParticipantCount := templateFields[2].Descriptor()
	// template.DefaultParticipantCount holds the default value on creation for the participantCount field.
	template.DefaultParticipantCount = templateDescParticipantCount.Default.(int)
	// template.ParticipantCountValidator is a validator for the "participantCount" field. It is called by the builders before save.
	template.ParticipantCountValidator = templateDescParticipantCount.Validators[0].(func(int) error)
	// templateDescAdult is the schema descriptor for adult field.
	templateDescAdult := templateFields[5].Descriptor()
	// template.DefaultAdult holds the default value on creation for the adult field.
	template.DefaultAdult = templateDescAdult.Default.(bool)
	// templateDescSandbox is the schema descriptor for sandbox field.
	templateDescSandbox := templateFields[6].Descriptor()
	// template.DefaultSandbox holds the default value on creation for the sandbox field.
	template.DefaultSandbox = templateDescSandbox.Default.(bool)
	// templateDescID is the schema descriptor for id field.
	templateDescID := templateMixinFields0[0].Descriptor()
	// template.IDValidator is a validator for the "id" field. It is called by the builders before save.
	template.IDValidator = func() func(string) error {
		validators := templateDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
