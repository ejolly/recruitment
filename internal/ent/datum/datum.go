// Code generated by entc, DO NOT EDIT.

package datum

import (
	"time"
)

const (
	// Label holds the string label denoting the datum type in the database.
	Label = "datum"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldVal holds the string denoting the val field in the database.
	FieldVal = "val"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldCurrent holds the string denoting the current field in the database.
	FieldCurrent = "current"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "deleted_at"

	// EdgeParticipant holds the string denoting the participant edge name in mutations.
	EdgeParticipant = "participant"

	// Table holds the table name of the datum in the database.
	Table = "data"
	// ParticipantTable is the table the holds the participant relation/edge.
	ParticipantTable = "data"
	// ParticipantInverseTable is the table name for the Participant entity.
	// It exists in this package in order to avoid circular dependency with the "participant" package.
	ParticipantInverseTable = "participants"
	// ParticipantColumn is the table column denoting the participant relation/edge.
	ParticipantColumn = "participant_data"
)

// Columns holds all SQL columns for datum fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKey,
	FieldVal,
	FieldIndex,
	FieldCurrent,
	FieldVersion,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Datum type.
var ForeignKeys = []string{
	"participant_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIndex holds the default value on creation for the index field.
	DefaultIndex int
	// DefaultCurrent holds the default value on creation for the current field.
	DefaultCurrent bool
	// DefaultVersion holds the default value on creation for the version field.
	DefaultVersion int
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
