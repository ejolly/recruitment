// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/admin"
	"github.com/empiricaly/recruitment/internal/ent/project"
	"github.com/facebook/ent/dialect/sql"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// ProjectID holds the value of the "projectID" field.
	ProjectID string `json:"projectID,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges          ProjectEdges `json:"edges"`
	admin_projects *string
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Runs holds the value of the runs edge.
	Runs []*Run
	// Templates holds the value of the templates edge.
	Templates []*Template
	// Owner holds the value of the owner edge.
	Owner *Admin
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RunsOrErr returns the Runs value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) RunsOrErr() ([]*Run, error) {
	if e.loadedTypes[0] {
		return e.Runs, nil
	}
	return nil, &NotLoadedError{edge: "runs"}
}

// TemplatesOrErr returns the Templates value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TemplatesOrErr() ([]*Template, error) {
	if e.loadedTypes[1] {
		return e.Templates, nil
	}
	return nil, &NotLoadedError{edge: "templates"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) OwnerOrErr() (*Admin, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
		&sql.NullString{}, // projectID
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Project) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // admin_projects
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(values ...interface{}) error {
	if m, n := len(values), len(project.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		pr.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[0])
	} else if value.Valid {
		pr.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[1])
	} else if value.Valid {
		pr.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field projectID", values[2])
	} else if value.Valid {
		pr.ProjectID = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[3])
	} else if value.Valid {
		pr.Name = value.String
	}
	values = values[4:]
	if len(values) == len(project.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field admin_projects", values[0])
		} else if value.Valid {
			pr.admin_projects = new(string)
			*pr.admin_projects = value.String
		}
	}
	return nil
}

// QueryRuns queries the runs edge of the Project.
func (pr *Project) QueryRuns() *RunQuery {
	return (&ProjectClient{config: pr.config}).QueryRuns(pr)
}

// QueryTemplates queries the templates edge of the Project.
func (pr *Project) QueryTemplates() *TemplateQuery {
	return (&ProjectClient{config: pr.config}).QueryTemplates(pr)
}

// QueryOwner queries the owner edge of the Project.
func (pr *Project) QueryOwner() *AdminQuery {
	return (&ProjectClient{config: pr.config}).QueryOwner(pr)
}

// Update returns a builder for updating this Project.
// Note that, you need to call Project.Unwrap() before calling this method, if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return (&ProjectClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", createdAt=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", projectID=")
	builder.WriteString(pr.ProjectID)
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
