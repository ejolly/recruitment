// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/participation"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql"
)

// Participation is the model entity for the Participation schema.
type Participation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AddedParticipant holds the value of the "addedParticipant" field.
	AddedParticipant bool `json:"addedParticipant,omitempty"`
	// MturkWorkerID holds the value of the "mturkWorkerID" field.
	MturkWorkerID string `json:"mturkWorkerID,omitempty"`
	// MturkAssignmentID holds the value of the "mturkAssignmentID" field.
	MturkAssignmentID string `json:"mturkAssignmentID,omitempty"`
	// MturkHitID holds the value of the "mturkHitID" field.
	MturkHitID string `json:"mturkHitID,omitempty"`
	// MturkAcceptedAt holds the value of the "mturkAcceptedAt" field.
	MturkAcceptedAt time.Time `json:"mturkAcceptedAt,omitempty"`
	// MturkSubmittedAt holds the value of the "mturkSubmittedAt" field.
	MturkSubmittedAt time.Time `json:"mturkSubmittedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipationQuery when eager-loading is set.
	Edges                      ParticipationEdges `json:"edges"`
	participant_participations *string
	step_run_participations    *string
}

// ParticipationEdges holds the relations/edges for other nodes in the graph.
type ParticipationEdges struct {
	// StepRun holds the value of the stepRun edge.
	StepRun *StepRun
	// Participant holds the value of the participant edge.
	Participant *Participant
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StepRunOrErr returns the StepRun value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipationEdges) StepRunOrErr() (*StepRun, error) {
	if e.loadedTypes[0] {
		if e.StepRun == nil {
			// The edge stepRun was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: steprun.Label}
		}
		return e.StepRun, nil
	}
	return nil, &NotLoadedError{edge: "stepRun"}
}

// ParticipantOrErr returns the Participant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipationEdges) ParticipantOrErr() (*Participant, error) {
	if e.loadedTypes[1] {
		if e.Participant == nil {
			// The edge participant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: participant.Label}
		}
		return e.Participant, nil
	}
	return nil, &NotLoadedError{edge: "participant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullBool{},   // addedParticipant
		&sql.NullString{}, // mturkWorkerID
		&sql.NullString{}, // mturkAssignmentID
		&sql.NullString{}, // mturkHitID
		&sql.NullTime{},   // mturkAcceptedAt
		&sql.NullTime{},   // mturkSubmittedAt
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Participation) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // participant_participations
		&sql.NullString{}, // step_run_participations
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participation fields.
func (pa *Participation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(participation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		pa.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		pa.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		pa.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field addedParticipant", values[2])
	} else if value.Valid {
		pa.AddedParticipant = value.Bool
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mturkWorkerID", values[3])
	} else if value.Valid {
		pa.MturkWorkerID = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mturkAssignmentID", values[4])
	} else if value.Valid {
		pa.MturkAssignmentID = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mturkHitID", values[5])
	} else if value.Valid {
		pa.MturkHitID = value.String
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field mturkAcceptedAt", values[6])
	} else if value.Valid {
		pa.MturkAcceptedAt = value.Time
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field mturkSubmittedAt", values[7])
	} else if value.Valid {
		pa.MturkSubmittedAt = value.Time
	}
	values = values[8:]
	if len(values) == len(participation.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field participant_participations", values[0])
		} else if value.Valid {
			pa.participant_participations = new(string)
			*pa.participant_participations = value.String
		}
		if value, ok := values[1].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field step_run_participations", values[1])
		} else if value.Valid {
			pa.step_run_participations = new(string)
			*pa.step_run_participations = value.String
		}
	}
	return nil
}

// QueryStepRun queries the stepRun edge of the Participation.
func (pa *Participation) QueryStepRun() *StepRunQuery {
	return (&ParticipationClient{config: pa.config}).QueryStepRun(pa)
}

// QueryParticipant queries the participant edge of the Participation.
func (pa *Participation) QueryParticipant() *ParticipantQuery {
	return (&ParticipationClient{config: pa.config}).QueryParticipant(pa)
}

// Update returns a builder for updating this Participation.
// Note that, you need to call Participation.Unwrap() before calling this method, if this Participation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participation) Update() *ParticipationUpdateOne {
	return (&ParticipationClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Participation) Unwrap() *Participation {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participation is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participation) String() string {
	var builder strings.Builder
	builder.WriteString("Participation(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", addedParticipant=")
	builder.WriteString(fmt.Sprintf("%v", pa.AddedParticipant))
	builder.WriteString(", mturkWorkerID=")
	builder.WriteString(pa.MturkWorkerID)
	builder.WriteString(", mturkAssignmentID=")
	builder.WriteString(pa.MturkAssignmentID)
	builder.WriteString(", mturkHitID=")
	builder.WriteString(pa.MturkHitID)
	builder.WriteString(", mturkAcceptedAt=")
	builder.WriteString(pa.MturkAcceptedAt.Format(time.ANSIC))
	builder.WriteString(", mturkSubmittedAt=")
	builder.WriteString(pa.MturkSubmittedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Participations is a parsable slice of Participation.
type Participations []*Participation

func (pa Participations) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
