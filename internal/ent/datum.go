// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/datum"
	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/facebook/ent/dialect/sql"
)

// Datum is the model entity for the Datum schema.
type Datum struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Val holds the value of the "val" field.
	Val string `json:"val,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Current holds the value of the "current" field.
	Current bool `json:"current,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// DeletedAt holds the value of the "deletedAt" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatumQuery when eager-loading is set.
	Edges            DatumEdges `json:"edges"`
	participant_data *string
}

// DatumEdges holds the relations/edges for other nodes in the graph.
type DatumEdges struct {
	// Participant holds the value of the participant edge.
	Participant *Participant
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParticipantOrErr returns the Participant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatumEdges) ParticipantOrErr() (*Participant, error) {
	if e.loadedTypes[0] {
		if e.Participant == nil {
			// The edge participant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: participant.Label}
		}
		return e.Participant, nil
	}
	return nil, &NotLoadedError{edge: "participant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Datum) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // key
		&sql.NullString{}, // val
		&sql.NullInt64{},  // index
		&sql.NullBool{},   // current
		&sql.NullInt64{},  // version
		&sql.NullTime{},   // deletedAt
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Datum) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // participant_data
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Datum fields.
func (d *Datum) assignValues(values ...interface{}) error {
	if m, n := len(values), len(datum.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		d.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		d.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		d.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field key", values[2])
	} else if value.Valid {
		d.Key = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field val", values[3])
	} else if value.Valid {
		d.Val = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field index", values[4])
	} else if value.Valid {
		d.Index = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field current", values[5])
	} else if value.Valid {
		d.Current = value.Bool
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[6])
	} else if value.Valid {
		d.Version = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field deletedAt", values[7])
	} else if value.Valid {
		d.DeletedAt = new(time.Time)
		*d.DeletedAt = value.Time
	}
	values = values[8:]
	if len(values) == len(datum.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field participant_data", values[0])
		} else if value.Valid {
			d.participant_data = new(string)
			*d.participant_data = value.String
		}
	}
	return nil
}

// QueryParticipant queries the participant edge of the Datum.
func (d *Datum) QueryParticipant() *ParticipantQuery {
	return (&DatumClient{config: d.config}).QueryParticipant(d)
}

// Update returns a builder for updating this Datum.
// Note that, you need to call Datum.Unwrap() before calling this method, if this Datum
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Datum) Update() *DatumUpdateOne {
	return (&DatumClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Datum) Unwrap() *Datum {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Datum is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Datum) String() string {
	var builder strings.Builder
	builder.WriteString("Datum(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", key=")
	builder.WriteString(d.Key)
	builder.WriteString(", val=")
	builder.WriteString(d.Val)
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", d.Index))
	builder.WriteString(", current=")
	builder.WriteString(fmt.Sprintf("%v", d.Current))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", d.Version))
	if v := d.DeletedAt; v != nil {
		builder.WriteString(", deletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Data is a parsable slice of Datum.
type Data []*Datum

func (d Data) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
