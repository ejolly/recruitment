// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/participation"
	"github.com/empiricaly/recruitment/internal/ent/predicate"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ParticipationUpdate is the builder for updating Participation entities.
type ParticipationUpdate struct {
	config
	hooks      []Hook
	mutation   *ParticipationMutation
	predicates []predicate.Participation
}

// Where adds a new predicate for the builder.
func (pu *ParticipationUpdate) Where(ps ...predicate.Participation) *ParticipationUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *ParticipationUpdate) SetUpdatedAt(t time.Time) *ParticipationUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetMturkWorkerId sets the mturkWorkerId field.
func (pu *ParticipationUpdate) SetMturkWorkerId(s string) *ParticipationUpdate {
	pu.mutation.SetMturkWorkerId(s)
	return pu
}

// SetMturkAssignmentID sets the mturkAssignmentID field.
func (pu *ParticipationUpdate) SetMturkAssignmentID(s string) *ParticipationUpdate {
	pu.mutation.SetMturkAssignmentID(s)
	return pu
}

// SetMturkHitID sets the mturkHitID field.
func (pu *ParticipationUpdate) SetMturkHitID(s string) *ParticipationUpdate {
	pu.mutation.SetMturkHitID(s)
	return pu
}

// SetMturkAcceptedAt sets the mturkAcceptedAt field.
func (pu *ParticipationUpdate) SetMturkAcceptedAt(t time.Time) *ParticipationUpdate {
	pu.mutation.SetMturkAcceptedAt(t)
	return pu
}

// SetMturkSubmittedAt sets the mturkSubmittedAt field.
func (pu *ParticipationUpdate) SetMturkSubmittedAt(t time.Time) *ParticipationUpdate {
	pu.mutation.SetMturkSubmittedAt(t)
	return pu
}

// SetStepRunID sets the stepRun edge to StepRun by id.
func (pu *ParticipationUpdate) SetStepRunID(id string) *ParticipationUpdate {
	pu.mutation.SetStepRunID(id)
	return pu
}

// SetNillableStepRunID sets the stepRun edge to StepRun by id if the given value is not nil.
func (pu *ParticipationUpdate) SetNillableStepRunID(id *string) *ParticipationUpdate {
	if id != nil {
		pu = pu.SetStepRunID(*id)
	}
	return pu
}

// SetStepRun sets the stepRun edge to StepRun.
func (pu *ParticipationUpdate) SetStepRun(s *StepRun) *ParticipationUpdate {
	return pu.SetStepRunID(s.ID)
}

// SetParticipantID sets the participant edge to Participant by id.
func (pu *ParticipationUpdate) SetParticipantID(id string) *ParticipationUpdate {
	pu.mutation.SetParticipantID(id)
	return pu
}

// SetNillableParticipantID sets the participant edge to Participant by id if the given value is not nil.
func (pu *ParticipationUpdate) SetNillableParticipantID(id *string) *ParticipationUpdate {
	if id != nil {
		pu = pu.SetParticipantID(*id)
	}
	return pu
}

// SetParticipant sets the participant edge to Participant.
func (pu *ParticipationUpdate) SetParticipant(p *Participant) *ParticipationUpdate {
	return pu.SetParticipantID(p.ID)
}

// Mutation returns the ParticipationMutation object of the builder.
func (pu *ParticipationUpdate) Mutation() *ParticipationMutation {
	return pu.mutation
}

// ClearStepRun clears the "stepRun" edge to type StepRun.
func (pu *ParticipationUpdate) ClearStepRun() *ParticipationUpdate {
	pu.mutation.ClearStepRun()
	return pu
}

// ClearParticipant clears the "participant" edge to type Participant.
func (pu *ParticipationUpdate) ClearParticipant() *ParticipationUpdate {
	pu.mutation.ClearParticipant()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *ParticipationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ParticipationUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ParticipationUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ParticipationUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ParticipationUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := participation.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ParticipationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   participation.Table,
			Columns: participation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: participation.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participation.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.MturkWorkerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participation.FieldMturkWorkerId,
		})
	}
	if value, ok := pu.mutation.MturkAssignmentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participation.FieldMturkAssignmentID,
		})
	}
	if value, ok := pu.mutation.MturkHitID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participation.FieldMturkHitID,
		})
	}
	if value, ok := pu.mutation.MturkAcceptedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participation.FieldMturkAcceptedAt,
		})
	}
	if value, ok := pu.mutation.MturkSubmittedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participation.FieldMturkSubmittedAt,
		})
	}
	if pu.mutation.StepRunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.StepRunTable,
			Columns: []string{participation.StepRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StepRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.StepRunTable,
			Columns: []string{participation.StepRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.ParticipantTable,
			Columns: []string{participation.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.ParticipantTable,
			Columns: []string{participation.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ParticipationUpdateOne is the builder for updating a single Participation entity.
type ParticipationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ParticipationMutation
}

// SetUpdatedAt sets the updated_at field.
func (puo *ParticipationUpdateOne) SetUpdatedAt(t time.Time) *ParticipationUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetMturkWorkerId sets the mturkWorkerId field.
func (puo *ParticipationUpdateOne) SetMturkWorkerId(s string) *ParticipationUpdateOne {
	puo.mutation.SetMturkWorkerId(s)
	return puo
}

// SetMturkAssignmentID sets the mturkAssignmentID field.
func (puo *ParticipationUpdateOne) SetMturkAssignmentID(s string) *ParticipationUpdateOne {
	puo.mutation.SetMturkAssignmentID(s)
	return puo
}

// SetMturkHitID sets the mturkHitID field.
func (puo *ParticipationUpdateOne) SetMturkHitID(s string) *ParticipationUpdateOne {
	puo.mutation.SetMturkHitID(s)
	return puo
}

// SetMturkAcceptedAt sets the mturkAcceptedAt field.
func (puo *ParticipationUpdateOne) SetMturkAcceptedAt(t time.Time) *ParticipationUpdateOne {
	puo.mutation.SetMturkAcceptedAt(t)
	return puo
}

// SetMturkSubmittedAt sets the mturkSubmittedAt field.
func (puo *ParticipationUpdateOne) SetMturkSubmittedAt(t time.Time) *ParticipationUpdateOne {
	puo.mutation.SetMturkSubmittedAt(t)
	return puo
}

// SetStepRunID sets the stepRun edge to StepRun by id.
func (puo *ParticipationUpdateOne) SetStepRunID(id string) *ParticipationUpdateOne {
	puo.mutation.SetStepRunID(id)
	return puo
}

// SetNillableStepRunID sets the stepRun edge to StepRun by id if the given value is not nil.
func (puo *ParticipationUpdateOne) SetNillableStepRunID(id *string) *ParticipationUpdateOne {
	if id != nil {
		puo = puo.SetStepRunID(*id)
	}
	return puo
}

// SetStepRun sets the stepRun edge to StepRun.
func (puo *ParticipationUpdateOne) SetStepRun(s *StepRun) *ParticipationUpdateOne {
	return puo.SetStepRunID(s.ID)
}

// SetParticipantID sets the participant edge to Participant by id.
func (puo *ParticipationUpdateOne) SetParticipantID(id string) *ParticipationUpdateOne {
	puo.mutation.SetParticipantID(id)
	return puo
}

// SetNillableParticipantID sets the participant edge to Participant by id if the given value is not nil.
func (puo *ParticipationUpdateOne) SetNillableParticipantID(id *string) *ParticipationUpdateOne {
	if id != nil {
		puo = puo.SetParticipantID(*id)
	}
	return puo
}

// SetParticipant sets the participant edge to Participant.
func (puo *ParticipationUpdateOne) SetParticipant(p *Participant) *ParticipationUpdateOne {
	return puo.SetParticipantID(p.ID)
}

// Mutation returns the ParticipationMutation object of the builder.
func (puo *ParticipationUpdateOne) Mutation() *ParticipationMutation {
	return puo.mutation
}

// ClearStepRun clears the "stepRun" edge to type StepRun.
func (puo *ParticipationUpdateOne) ClearStepRun() *ParticipationUpdateOne {
	puo.mutation.ClearStepRun()
	return puo
}

// ClearParticipant clears the "participant" edge to type Participant.
func (puo *ParticipationUpdateOne) ClearParticipant() *ParticipationUpdateOne {
	puo.mutation.ClearParticipant()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *ParticipationUpdateOne) Save(ctx context.Context) (*Participation, error) {
	var (
		err  error
		node *Participation
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ParticipationUpdateOne) SaveX(ctx context.Context) *Participation {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ParticipationUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ParticipationUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ParticipationUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := participation.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ParticipationUpdateOne) sqlSave(ctx context.Context) (_node *Participation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   participation.Table,
			Columns: participation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: participation.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Participation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participation.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.MturkWorkerId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participation.FieldMturkWorkerId,
		})
	}
	if value, ok := puo.mutation.MturkAssignmentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participation.FieldMturkAssignmentID,
		})
	}
	if value, ok := puo.mutation.MturkHitID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: participation.FieldMturkHitID,
		})
	}
	if value, ok := puo.mutation.MturkAcceptedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participation.FieldMturkAcceptedAt,
		})
	}
	if value, ok := puo.mutation.MturkSubmittedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: participation.FieldMturkSubmittedAt,
		})
	}
	if puo.mutation.StepRunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.StepRunTable,
			Columns: []string{participation.StepRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StepRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.StepRunTable,
			Columns: []string{participation.StepRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: steprun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParticipantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.ParticipantTable,
			Columns: []string{participation.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   participation.ParticipantTable,
			Columns: []string{participation.ParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Participation{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
