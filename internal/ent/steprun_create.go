// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/empiricaly/recruitment/internal/ent/participant"
	"github.com/empiricaly/recruitment/internal/ent/participation"
	"github.com/empiricaly/recruitment/internal/ent/run"
	"github.com/empiricaly/recruitment/internal/ent/step"
	"github.com/empiricaly/recruitment/internal/ent/steprun"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// StepRunCreate is the builder for creating a StepRun entity.
type StepRunCreate struct {
	config
	mutation *StepRunMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (src *StepRunCreate) SetCreatedAt(t time.Time) *StepRunCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (src *StepRunCreate) SetNillableCreatedAt(t *time.Time) *StepRunCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the updated_at field.
func (src *StepRunCreate) SetUpdatedAt(t time.Time) *StepRunCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (src *StepRunCreate) SetNillableUpdatedAt(t *time.Time) *StepRunCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetStatus sets the status field.
func (src *StepRunCreate) SetStatus(s steprun.Status) *StepRunCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetStartedAt sets the startedAt field.
func (src *StepRunCreate) SetStartedAt(t time.Time) *StepRunCreate {
	src.mutation.SetStartedAt(t)
	return src
}

// SetNillableStartedAt sets the startedAt field if the given value is not nil.
func (src *StepRunCreate) SetNillableStartedAt(t *time.Time) *StepRunCreate {
	if t != nil {
		src.SetStartedAt(*t)
	}
	return src
}

// SetEndedAt sets the endedAt field.
func (src *StepRunCreate) SetEndedAt(t time.Time) *StepRunCreate {
	src.mutation.SetEndedAt(t)
	return src
}

// SetNillableEndedAt sets the endedAt field if the given value is not nil.
func (src *StepRunCreate) SetNillableEndedAt(t *time.Time) *StepRunCreate {
	if t != nil {
		src.SetEndedAt(*t)
	}
	return src
}

// SetParticipantsCount sets the participantsCount field.
func (src *StepRunCreate) SetParticipantsCount(i int) *StepRunCreate {
	src.mutation.SetParticipantsCount(i)
	return src
}

// SetHitID sets the hitID field.
func (src *StepRunCreate) SetHitID(s string) *StepRunCreate {
	src.mutation.SetHitID(s)
	return src
}

// SetNillableHitID sets the hitID field if the given value is not nil.
func (src *StepRunCreate) SetNillableHitID(s *string) *StepRunCreate {
	if s != nil {
		src.SetHitID(*s)
	}
	return src
}

// SetID sets the id field.
func (src *StepRunCreate) SetID(s string) *StepRunCreate {
	src.mutation.SetID(s)
	return src
}

// AddCreatedParticipantIDs adds the createdParticipants edge to Participant by ids.
func (src *StepRunCreate) AddCreatedParticipantIDs(ids ...string) *StepRunCreate {
	src.mutation.AddCreatedParticipantIDs(ids...)
	return src
}

// AddCreatedParticipants adds the createdParticipants edges to Participant.
func (src *StepRunCreate) AddCreatedParticipants(p ...*Participant) *StepRunCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return src.AddCreatedParticipantIDs(ids...)
}

// AddParticipantIDs adds the participants edge to Participant by ids.
func (src *StepRunCreate) AddParticipantIDs(ids ...string) *StepRunCreate {
	src.mutation.AddParticipantIDs(ids...)
	return src
}

// AddParticipants adds the participants edges to Participant.
func (src *StepRunCreate) AddParticipants(p ...*Participant) *StepRunCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return src.AddParticipantIDs(ids...)
}

// AddParticipationIDs adds the participations edge to Participation by ids.
func (src *StepRunCreate) AddParticipationIDs(ids ...string) *StepRunCreate {
	src.mutation.AddParticipationIDs(ids...)
	return src
}

// AddParticipations adds the participations edges to Participation.
func (src *StepRunCreate) AddParticipations(p ...*Participation) *StepRunCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return src.AddParticipationIDs(ids...)
}

// SetStepID sets the step edge to Step by id.
func (src *StepRunCreate) SetStepID(id string) *StepRunCreate {
	src.mutation.SetStepID(id)
	return src
}

// SetStep sets the step edge to Step.
func (src *StepRunCreate) SetStep(s *Step) *StepRunCreate {
	return src.SetStepID(s.ID)
}

// SetRunID sets the run edge to Run by id.
func (src *StepRunCreate) SetRunID(id string) *StepRunCreate {
	src.mutation.SetRunID(id)
	return src
}

// SetNillableRunID sets the run edge to Run by id if the given value is not nil.
func (src *StepRunCreate) SetNillableRunID(id *string) *StepRunCreate {
	if id != nil {
		src = src.SetRunID(*id)
	}
	return src
}

// SetRun sets the run edge to Run.
func (src *StepRunCreate) SetRun(r *Run) *StepRunCreate {
	return src.SetRunID(r.ID)
}

// Mutation returns the StepRunMutation object of the builder.
func (src *StepRunCreate) Mutation() *StepRunMutation {
	return src.mutation
}

// Save creates the StepRun in the database.
func (src *StepRunCreate) Save(ctx context.Context) (*StepRun, error) {
	if err := src.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *StepRun
	)
	if len(src.hooks) == 0 {
		node, err = src.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StepRunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			src.mutation = mutation
			node, err = src.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(src.hooks) - 1; i >= 0; i-- {
			mut = src.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, src.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (src *StepRunCreate) SaveX(ctx context.Context) *StepRun {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (src *StepRunCreate) preSave() error {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := steprun.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := steprun.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := src.mutation.Status(); ok {
		if err := steprun.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := src.mutation.ParticipantsCount(); !ok {
		return &ValidationError{Name: "participantsCount", err: errors.New("ent: missing required field \"participantsCount\"")}
	}
	if v, ok := src.mutation.ID(); ok {
		if err := steprun.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	if _, ok := src.mutation.StepID(); !ok {
		return &ValidationError{Name: "step", err: errors.New("ent: missing required edge \"step\"")}
	}
	return nil
}

func (src *StepRunCreate) sqlSave(ctx context.Context) (*StepRun, error) {
	sr, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sr, nil
}

func (src *StepRunCreate) createSpec() (*StepRun, *sqlgraph.CreateSpec) {
	var (
		sr    = &StepRun{config: src.config}
		_spec = &sqlgraph.CreateSpec{
			Table: steprun.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: steprun.FieldID,
			},
		}
	)
	if id, ok := src.mutation.ID(); ok {
		sr.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldCreatedAt,
		})
		sr.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldUpdatedAt,
		})
		sr.UpdatedAt = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: steprun.FieldStatus,
		})
		sr.Status = value
	}
	if value, ok := src.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldStartedAt,
		})
		sr.StartedAt = &value
	}
	if value, ok := src.mutation.EndedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: steprun.FieldEndedAt,
		})
		sr.EndedAt = &value
	}
	if value, ok := src.mutation.ParticipantsCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: steprun.FieldParticipantsCount,
		})
		sr.ParticipantsCount = value
	}
	if value, ok := src.mutation.HitID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: steprun.FieldHitID,
		})
		sr.HitID = &value
	}
	if nodes := src.mutation.CreatedParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   steprun.CreatedParticipantsTable,
			Columns: []string{steprun.CreatedParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   steprun.ParticipantsTable,
			Columns: steprun.ParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ParticipationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   steprun.ParticipationsTable,
			Columns: []string{steprun.ParticipationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: participation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.StepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   steprun.StepTable,
			Columns: []string{steprun.StepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: step.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.RunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   steprun.RunTable,
			Columns: []string{steprun.RunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: run.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return sr, _spec
}

// StepRunCreateBulk is the builder for creating a bulk of StepRun entities.
type StepRunCreateBulk struct {
	config
	builders []*StepRunCreate
}

// Save creates the StepRun entities in the database.
func (srcb *StepRunCreateBulk) Save(ctx context.Context) ([]*StepRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*StepRun, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*StepRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (srcb *StepRunCreateBulk) SaveX(ctx context.Context) []*StepRun {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
